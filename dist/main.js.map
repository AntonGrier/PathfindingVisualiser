{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/IPathfinder.tsx","webpack:///./src/Algorithms/PathfindingAlgorithm.tsx","webpack:///./src/mazes/MazeGenerator.ts","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/App.tsx","webpack:///./src/Pathfinder.tsx","webpack:///./src/Cell.tsx","webpack:///./src/Navbar.tsx","webpack:///./src/Algorithms/Dijkstra.tsx","webpack:///./src/Algorithms/DataStructures/PriorityQueue.tsx","webpack:///./src/Algorithms/DFS.ts","webpack:///./src/Algorithms/DataStructures/Stack.tsx","webpack:///./src/Algorithms/BFS.tsx","webpack:///./src/Algorithms/DataStructures/Queue.ts","webpack:///./src/mazes/RecursiveDivision.ts","webpack:///./src/mazes/RecursiveBacktracking.ts","webpack:///./src/mazes/wallCarver.ts","webpack:///./src/Algorithms/Perlin/PerlinNoise.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GRID_W","GRID_H","DEFAULT_START_POS","x","Math","floor","y","DEFAULT_FINISH_POS","UPDATE_RATE","MouseState","NodeType","pathValues","Map","finalPath","visitedNodesInOrder","this","slice","length","grid","position","neighbors","push","filter","neighbor","nodeType","Wall","isVisited","cornerCheck","hash","pathData","newPathData","set","pos1","pos2","toString","min","max","random","wallsCreatedInOrder","ReactDOM","render","document","getElementById","App","Component","props","super","state","className","Pathfinder","references","Array","fill","map","createRef","row","curRow","col","newNode","Unvisited","weight","startPos","finishPos","mouseState","PlacingWall","isMouseDown","updateLock","perlinToggle","prevAlgorithm","nextProps","nextState","node","eventType","Disabled","onMouseDown","onMouseUp","onMouseEnter","MovingStart","isFinish","MovingFinish","isStart","RemovingWall","clearPath","setState","recalculatePath","visitedInOrder","produceVisitedInOrder","produceFinalPath","Visited","ShortestPath","algorithm","calculatePath","shortestPath","visualiseAlgorithm","lockRender","visualiseVisited","visualisePath","unlockRender","Promise","resolve","setTimeout","ref","current","includes","perlin","seed","newWeight","noise","console","log","mazeGenerator","walls","generateWalls","visualizeMaze","wallAlreadyPlaced","wall","performAlgorithm","generateLandscape","generateMaze","rowIdx","cell","colIdx","updateMouseState","nodeRef","Cell","event","type","rbgVal","backgroundColor","convertWeightToGreyscale","id","style","handleMouseEvent","Navbar","onClick","Dijkstra","minHeap","PriorityQueue","setMap","insert","size","closestPosition","pop","markAsVisited","equalPosition","findShortestPath","getNeighbors","closestDistance","newDistance","getDistance","neighborPathData","previousNode","clear","weightDifference","pow","sqrt","abs","forEach","nodePosition","Infinity","curPosition","unshift","heap","val","priority","tmp","found","find","foundNode","tuple","shift","undefined","_","values","DFS","stack","isEmpty","reverse","data","top","element","BFS","queue","RecursiveDivision","gapMap","lr","divide","ul","width","height","splitIdx","gap","newLr","newUl","vertical","getRandom","up","down","has","left","right","pos","RecursiveBacktracking","visited","createStartingWalls","randomPos","carveWalls","visit","getUnvisitedNeighbors","isVisisted","placeWallBetweenPositions","positionInBounds","randomisePositions","positions","sort","WallCarver","topBorderWall","botBorderWall","addWall","middleWall","crossWall","positionBetween","permutation","z","X","Y","Z","u","fade","v","w","A","AA","AB","B","BA","BB","scale","lerp","grad","a","b","h"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = React;","import PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\n\r\nexport const GRID_W = 41;\r\nexport const GRID_H = 21;\r\nexport const DEFAULT_START_POS: Position = { x: Math.floor(GRID_W / 4), y: Math.floor(GRID_H / 2) };\r\nexport const DEFAULT_FINISH_POS: Position = { x: GRID_W - DEFAULT_START_POS.x, y: DEFAULT_START_POS.y };\r\nexport const UPDATE_RATE = 5;\r\n\r\nexport interface Position {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport enum MouseState {\r\n    PlacingWall,\r\n    RemovingWall,\r\n    MovingStart,\r\n    MovingFinish,\r\n    Disabled,\r\n}\r\nexport enum NodeType {\r\n    Unvisited,\r\n    Visited,\r\n    Wall,\r\n    ShortestPath,\r\n}\r\nexport interface Node {\r\n    position: Position;\r\n    nodeType: NodeType;\r\n    weight: number; //\r\n}\r\n","import { GRID_H, GRID_W, Node, NodeType, Position } from '../IPathfinder';\r\n\r\nexport interface PathData {\r\n    isVisited: boolean;\r\n    shortestPath?: number;\r\n    previousNode?: Position;\r\n}\r\n\r\nexport default abstract class PathfindingAlgorithm {\r\n    pathValues: Map<string, PathData> = new Map<string, PathData>();\r\n    finalPath: Array<Position> = [];\r\n    visitedNodesInOrder: Array<Position> = [];\r\n\r\n    protected abstract setMap(grid: Array<Array<Node>>, startPos?: Position): void;\r\n\r\n    public abstract calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    public abstract recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    public produceVisitedInOrder(): Array<Position> {\r\n        return this.visitedNodesInOrder.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    public produceFinalPath(): Array<Position> {\r\n        return this.finalPath.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    protected getNeighbors(grid: Array<Array<Node>>, position: Position): Array<Position> {\r\n        let neighbors: Array<Position> = [];\r\n        neighbors.push({ x: position.x + 1, y: position.y });\r\n        neighbors.push({ x: position.x, y: position.y + 1 });\r\n        neighbors.push({ x: position.x, y: position.y - 1 });\r\n        neighbors.push({ x: position.x - 1, y: position.y });\r\n\r\n        neighbors.push({ x: position.x - 1, y: position.y + 1 });\r\n        neighbors.push({ x: position.x + 1, y: position.y + 1 });\r\n        neighbors.push({ x: position.x + 1, y: position.y - 1 });\r\n        neighbors.push({ x: position.x - 1, y: position.y - 1 });\r\n\r\n        return neighbors.filter((neighbor) => {\r\n            return (\r\n                neighbor.x >= 0 &&\r\n                neighbor.x < GRID_W &&\r\n                neighbor.y >= 0 &&\r\n                neighbor.y < GRID_H &&\r\n                grid[neighbor.y][neighbor.x].nodeType !== NodeType.Wall &&\r\n                !this.isVisited(neighbor) &&\r\n                this.cornerCheck(position, neighbor, grid)\r\n            );\r\n        });\r\n    }\r\n\r\n    private cornerCheck(position: Position, neighbor: Position, grid: Array<Array<Node>>): boolean {\r\n        return (\r\n            grid[position.y][neighbor.x].nodeType !== NodeType.Wall ||\r\n            grid[neighbor.y][position.x].nodeType !== NodeType.Wall\r\n        );\r\n    }\r\n\r\n    protected isVisited(position: Position): boolean {\r\n        return this.pathValues.get(this.hash(position)).isVisited;\r\n    }\r\n\r\n    protected markAsVisited(position: Position): void {\r\n        this.visitedNodesInOrder.push(position);\r\n        let pathData: PathData = this.pathValues.get(this.hash(position));\r\n        let newPathData: PathData = {\r\n            ...pathData,\r\n            isVisited: true,\r\n        };\r\n        this.pathValues.set(this.hash(position), newPathData);\r\n    }\r\n\r\n    protected equalPosition(pos1: Position, pos2: Position) {\r\n        return pos1.x === pos2.x && pos1.y === pos2.y;\r\n    }\r\n\r\n    protected hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n\r\n    protected clear(): void {\r\n        this.visitedNodesInOrder = [];\r\n        this.finalPath = [];\r\n        this.pathValues = new Map<string, PathData>();\r\n    }\r\n}\r\n","import { Position } from './../IPathfinder';\r\nexport default abstract class MazeGenerator {\r\n    wallsCreatedInOrder: Position[];\r\n    public abstract generateWalls(): Position[];\r\n    protected getRandom(min: number, max: number): number {\r\n        return min + Math.floor((max - min + 1) * Math.random());\r\n    }\r\n    protected addWall(position: Position) {\r\n        this.wallsCreatedInOrder.push(position);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","module.exports = ReactDOM;","import * as React from 'react';\r\nimport Pathfinder from '../Pathfinder';\r\nimport { Component } from 'react';\r\n\r\nexport default class App extends Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"app\">\r\n                <Pathfinder />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n    Node,\r\n    NodeType,\r\n    Position,\r\n    MouseState,\r\n    GRID_W,\r\n    GRID_H,\r\n    DEFAULT_START_POS,\r\n    DEFAULT_FINISH_POS,\r\n    UPDATE_RATE,\r\n} from './IPathfinder';\r\nimport { Component, createRef, RefObject } from 'react';\r\nimport Cell from './Cell';\r\nimport Navbar from './Navbar';\r\nimport PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\nimport PerlinNoise from './Algorithms/Perlin/PerlinNoise';\r\nimport MazeGenerator from './mazes/MazeGenerator';\r\n\r\ninterface State {\r\n    grid: Node[][];\r\n    startPos: Position;\r\n    finishPos: Position;\r\n    mouseState: MouseState;\r\n    isMouseDown: boolean;\r\n    updateLock: boolean;\r\n    perlinToggle: boolean;\r\n    prevAlgorithm: PathfindingAlgorithm;\r\n}\r\n\r\nexport default class Pathfinder extends Component<{}, State> {\r\n    references: Array<Array<RefObject<HTMLDivElement> | any>> = Array(GRID_H)\r\n        .fill([])\r\n        .map(() =>\r\n            Array(GRID_W)\r\n                .fill(0)\r\n                .map(() => createRef()),\r\n        );\r\n    constructor(props: any) {\r\n        super(props);\r\n        // this.references = Array(GRID_H)\r\n        //     .fill([])\r\n        //     .map(() =>\r\n        //         Array(GRID_W)\r\n        //             .fill(0)\r\n        //             .map(() => createRef()),\r\n        //     );\r\n        let grid: Node[][] = [];\r\n        for (let row = 0; row < GRID_H; row++) {\r\n            let curRow: Array<Node> = [];\r\n            for (let col = 0; col < GRID_W; col++) {\r\n                let newNode: Node = { position: { x: col, y: row }, nodeType: NodeType.Unvisited, weight: 0 };\r\n                curRow.push(newNode);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.state = {\r\n            grid: grid,\r\n            startPos: DEFAULT_START_POS,\r\n            finishPos: DEFAULT_FINISH_POS,\r\n            mouseState: MouseState.PlacingWall,\r\n            isMouseDown: false,\r\n            updateLock: false,\r\n            perlinToggle: false,\r\n            prevAlgorithm: null,\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<{}>, nextState: Readonly<State>): boolean {\r\n        return !nextState.updateLock;\r\n    }\r\n\r\n    clearPath(): Node[][] {\r\n        let grid: Node[][] = this.state.grid;\r\n        grid = grid.map((row) => {\r\n            return row.map((node) => {\r\n                return {\r\n                    ...node,\r\n                    nodeType: node.nodeType === NodeType.Wall ? NodeType.Wall : NodeType.Unvisited,\r\n                };\r\n            });\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    updateMouseState(position: Position, eventType: string): void {\r\n        if (this.state.mouseState === MouseState.Disabled) return;\r\n        switch (eventType) {\r\n            case 'mousedown': {\r\n                this.onMouseDown(position);\r\n                break;\r\n            }\r\n            case 'mouseup': {\r\n                this.onMouseUp();\r\n                break;\r\n            }\r\n            case 'mouseenter': {\r\n                this.onMouseEnter(position);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseDown(position: Position) {\r\n        let { grid, mouseState, isMouseDown, prevAlgorithm } = this.state;\r\n        let nodeType: NodeType = grid[position.y][position.x].nodeType;\r\n        if (\r\n            (mouseState === MouseState.MovingStart && this.isFinish(position)) ||\r\n            (mouseState === MouseState.MovingFinish && this.isStart(position))\r\n        )\r\n            return;\r\n\r\n        mouseState = this.isStart(position)\r\n            ? MouseState.MovingStart\r\n            : this.isFinish(position)\r\n            ? MouseState.MovingFinish\r\n            : nodeType === NodeType.Unvisited\r\n            ? MouseState.PlacingWall\r\n            : MouseState.RemovingWall;\r\n\r\n        if (!this.isStart(position) && !this.isFinish(position)) {\r\n            if (prevAlgorithm !== null) {\r\n                grid = this.clearPath();\r\n                prevAlgorithm = null;\r\n            }\r\n            if (nodeType === NodeType.Wall) {\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n            } else {\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n            }\r\n        }\r\n        isMouseDown = true;\r\n        this.setState({ grid: grid, mouseState: mouseState, isMouseDown: isMouseDown, prevAlgorithm: prevAlgorithm });\r\n    }\r\n\r\n    private onMouseUp() {\r\n        let mouseState = MouseState.PlacingWall;\r\n        let isMouseDown = false;\r\n        this.setState({ mouseState: mouseState, isMouseDown: isMouseDown });\r\n    }\r\n\r\n    private onMouseEnter(position: Position) {\r\n        let { grid, startPos, finishPos, mouseState, isMouseDown, prevAlgorithm } = this.state;\r\n        if (!isMouseDown || this.isStart(position) || this.isFinish(position)) return;\r\n\r\n        switch (mouseState) {\r\n            case MouseState.MovingStart:\r\n                startPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ startPos: startPos });\r\n                }\r\n                break;\r\n            case MouseState.MovingFinish:\r\n                finishPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ finishPos: finishPos });\r\n                }\r\n                break;\r\n            case MouseState.PlacingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                this.setState({ grid: grid });\r\n                break;\r\n            case MouseState.RemovingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                this.setState({ grid: grid });\r\n                break;\r\n        }\r\n    }\r\n\r\n    private recalculatePath(startPos: Position, finishPos: Position, prevAlgorithm: PathfindingAlgorithm) {\r\n        let grid: Node[][] = this.clearPath();\r\n        prevAlgorithm.recalculatePath(grid, startPos, finishPos);\r\n        let visitedInOrder = prevAlgorithm.produceVisitedInOrder();\r\n        let finalPath = prevAlgorithm.produceFinalPath();\r\n        for (let position of visitedInOrder) {\r\n            grid[position.y][position.x].nodeType = NodeType.Visited;\r\n        }\r\n        for (let position of finalPath) {\r\n            grid[position.y][position.x].nodeType = NodeType.ShortestPath;\r\n        }\r\n        this.setState({ grid: grid, startPos: startPos, finishPos: finishPos });\r\n    }\r\n\r\n    private isStart(position: Position) {\r\n        return position.x === this.state.startPos.x && position.y === this.state.startPos.y;\r\n    }\r\n\r\n    private isFinish(position: Position) {\r\n        return position.x === this.state.finishPos.x && position.y === this.state.finishPos.y;\r\n    }\r\n\r\n    private performAlgorithm(algorithm: PathfindingAlgorithm): void {\r\n        this.setState({ prevAlgorithm: algorithm, mouseState: MouseState.Disabled });\r\n        algorithm.calculatePath(this.state.grid, this.state.startPos, this.state.finishPos);\r\n        let visitedInOrder: Array<Position> = algorithm.produceVisitedInOrder();\r\n        let shortestPath: Array<Position> = algorithm.produceFinalPath();\r\n        this.visualiseAlgorithm(visitedInOrder, shortestPath);\r\n    }\r\n\r\n    private visualiseAlgorithm(visitedInOrder: Array<Position>, shortestPath: Array<Position>): void {\r\n        (async () => {\r\n            this.lockRender();\r\n            await this.visualiseVisited(visitedInOrder);\r\n            await this.visualisePath(shortestPath);\r\n            this.unlockRender();\r\n            this.setState({ mouseState: MouseState.PlacingWall });\r\n        })();\r\n    }\r\n\r\n    private visualiseVisited(visitedInOrder: Array<Position>): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= visitedInOrder.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === visitedInOrder.length) {\r\n                        resolve();\r\n                    } else {\r\n                        let position: Position = visitedInOrder[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (!className.includes('cell-start') && !className.includes('cell-finish')) {\r\n                            ref.current.className = 'cell cell-visited';\r\n                            let grid: Node[][] = this.state.grid;\r\n                            grid[position.y][position.x].nodeType = NodeType.Visited;\r\n                            this.setState({ grid: grid });\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private visualisePath(shortestPath: Array<Position>): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === shortestPath.length) {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, UPDATE_RATE);\r\n                    } else {\r\n                        let position: Position = shortestPath[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (!className.includes('cell-start') && !className.includes('cell-finish')) {\r\n                            ref.current.className = 'cell cell-shortestPath';\r\n                            let grid: Node[][] = this.state.grid;\r\n                            grid[position.y][position.x].nodeType = NodeType.ShortestPath;\r\n                            this.setState({ grid: grid });\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private lockRender() {\r\n        this.setState({ updateLock: true });\r\n    }\r\n\r\n    private unlockRender() {\r\n        this.setState({ updateLock: false });\r\n    }\r\n\r\n    private generateLandscape() {\r\n        const STEEPNESS: number = 0.2;\r\n        const perlin: PerlinNoise = new PerlinNoise();\r\n        const seed: number = Math.floor(Math.random() * 10000);\r\n\r\n        let grid: Node[][] = this.state.grid;\r\n        for (let y: number = 0; y < GRID_H; y++) {\r\n            for (let x: number = 0; x < GRID_W; x++) {\r\n                let newWeight = perlin.noise(x * STEEPNESS + seed, y * STEEPNESS + seed, 0);\r\n                grid[y][x].weight = newWeight;\r\n            }\r\n        }\r\n        console.log(grid);\r\n        this.setState({ grid: grid });\r\n    }\r\n\r\n    private generateMaze(mazeGenerator: MazeGenerator): void {\r\n        (async () => {\r\n            this.lockRender();\r\n            let walls: Position[] = mazeGenerator.generateWalls();\r\n            await this.visualizeMaze(walls);\r\n            this.unlockRender();\r\n            this.setState({ mouseState: MouseState.PlacingWall });\r\n        })();\r\n    }\r\n\r\n    private visualizeMaze(walls: Position[]): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= walls.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === walls.length) {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, UPDATE_RATE);\r\n                    } else {\r\n                        let grid: Node[][] = this.state.grid;\r\n                        let position: Position = walls[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (this.wallAlreadyPlaced(position)) {\r\n                            if (!className.includes('cell-start') && !className.includes('cell-finish')) {\r\n                                ref.current.className = 'cell cell-unvisited';\r\n                            }\r\n                            grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                        } else {\r\n                            if (!className.includes('cell-start') && !className.includes('cell-finish')) {\r\n                                ref.current.className = 'cell cell-wall';\r\n                            }\r\n                            grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                        }\r\n\r\n                        this.setState({ grid: grid });\r\n                    }\r\n                }, 10 * UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private wallAlreadyPlaced(wall: Position): boolean {\r\n        const grid = this.state.grid;\r\n        return grid[wall.y][wall.x].nodeType === NodeType.Wall;\r\n    }\r\n\r\n    public render(): any {\r\n        const grid = this.state.grid;\r\n        return (\r\n            <div>\r\n                <Navbar\r\n                    performAlgorithm={(algorithm: PathfindingAlgorithm) => this.performAlgorithm(algorithm)}\r\n                    clearPath={() => this.setState({ prevAlgorithm: null, grid: this.clearPath() })}\r\n                    generateLandscape={() => this.generateLandscape()}\r\n                    generateMaze={(mazeGenerator: MazeGenerator) => this.generateMaze(mazeGenerator)}\r\n                />\r\n                <div className=\"grid\">\r\n                    {grid.map((row: Array<Node>, rowIdx) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIdx}>\r\n                                {row.map((cell: Node, colIdx) => {\r\n                                    return (\r\n                                        <Cell\r\n                                            position={{ x: colIdx, y: rowIdx }}\r\n                                            isStart={\r\n                                                this.state.startPos.x === colIdx && this.state.startPos.y === rowIdx\r\n                                            }\r\n                                            isFinish={\r\n                                                this.state.finishPos.x === colIdx && this.state.finishPos.y === rowIdx\r\n                                            }\r\n                                            nodeType={cell.nodeType}\r\n                                            weight={cell.weight}\r\n                                            updateMouseState={(position: Position, eventType: string) =>\r\n                                                this.updateMouseState(position, eventType)\r\n                                            }\r\n                                            nodeRef={this.references[rowIdx][colIdx]}\r\n                                            key={colIdx}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Component, RefObject } from 'react';\r\nimport { NodeType, Position } from './IPathfinder';\r\n\r\ninterface Props {\r\n    position: Position;\r\n    isStart: boolean;\r\n    isFinish: boolean;\r\n    nodeType: NodeType;\r\n    weight: number;\r\n    updateMouseState: (position: Position, eventType: string) => void;\r\n    nodeRef: (ref: RefObject<HTMLDivElement> | any) => void;\r\n}\r\n\r\nexport default class Cell extends Component<Props> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleMouseEvent(event: React.MouseEvent<HTMLElement>): void {\r\n        let eventType: string = event.type;\r\n        let position: Position = this.props.position;\r\n        this.props.updateMouseState(position, eventType);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param weight is a scale of difficulty of node traversal [0,1]\r\n     * @returns greyscale rgb value corresponding to the weight e.g.:\r\n     *          weight 0 produces 'rgb(255,255,255)'\r\n     *          weight 1 produces 'rgb(55,55,55)'\r\n     */\r\n    convertWeightToGreyscale(weight: number): string {\r\n        weight = 1 - weight;\r\n        const min = 55;\r\n        const max = 255;\r\n        const rbgVal = min + (max - min) * weight;\r\n        return `rgb(${rbgVal},${rbgVal},${rbgVal})`;\r\n    }\r\n\r\n    render(): any {\r\n        let { isStart, isFinish, nodeType, weight } = this.props;\r\n        let className: string;\r\n        if (isStart || isFinish) {\r\n            className = isStart ? 'cell-start' : isFinish ? 'cell-finish' : '';\r\n        } else {\r\n            switch (nodeType) {\r\n                case NodeType.Unvisited:\r\n                    className = 'cell-unvisited';\r\n                    break;\r\n                case NodeType.Visited:\r\n                    className = 'cell-visited';\r\n                    break;\r\n                case NodeType.Wall:\r\n                    className = 'cell-wall';\r\n                    break;\r\n                case NodeType.ShortestPath:\r\n                    className = 'cell-shortestPath';\r\n                    break;\r\n            }\r\n        }\r\n        // TODO: Proper integration with visual perlin noise, w/o colour degradation with the regular pathfinding module\r\n        let backgroundColor = {};\r\n        if (nodeType !== NodeType.Wall && nodeType !== NodeType.ShortestPath && !isStart && !isFinish && weight > 0) {\r\n            backgroundColor = { backgroundColor: this.convertWeightToGreyscale(weight) };\r\n        }\r\n        return (\r\n            <div\r\n                ref={this.props.nodeRef}\r\n                id={`cell-${this.props.position.x}-${this.props.position.y}`}\r\n                className={`cell ${className}`}\r\n                style={{ ...backgroundColor }}\r\n                onMouseDown={(event) => this.handleMouseEvent(event)}\r\n                onMouseUp={(event) => this.handleMouseEvent(event)}\r\n                onMouseEnter={(event) => this.handleMouseEvent(event)}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import { Component } from 'react';\r\nimport * as React from 'react';\r\nimport PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\nimport Dijkstra from './Algorithms/Dijkstra';\r\nimport DFS from './Algorithms/DFS';\r\nimport BFS from './Algorithms/BFS';\r\nimport MazeGenerator from './mazes/MazeGenerator';\r\nimport RecursiveDivision from './mazes/RecursiveDivision';\r\nimport RecursiveBacktracking from './mazes/RecursiveBacktracking';\r\n\r\ninterface Props {\r\n    performAlgorithm: (algorithm: PathfindingAlgorithm) => void;\r\n    clearPath: () => void;\r\n    generateLandscape: () => void;\r\n    generateMaze: (mazeGenerator: MazeGenerator) => void;\r\n}\r\n\r\nexport default class Navbar extends Component<Props> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateMaze(new RecursiveBacktracking());\r\n                    }}\r\n                >\r\n                    Recursive BackTrack\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateMaze(new RecursiveDivision());\r\n                    }}\r\n                >\r\n                    Recursive Division\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateLandscape();\r\n                    }}\r\n                >\r\n                    Generate Landscape\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new Dijkstra());\r\n                    }}\r\n                >\r\n                    Dijkstra\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new DFS());\r\n                    }}\r\n                >\r\n                    DFS\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new BFS());\r\n                    }}\r\n                >\r\n                    BFS\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.clearPath();\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import PathfindingAlgorithm, { PathData } from './PathfindingAlgorithm';\r\nimport { Node, Position } from '../IPathfinder';\r\nimport { PriorityQueue } from './DataStructures/PriorityQueue';\r\n\r\nexport default class Dijkstra extends PathfindingAlgorithm {\r\n    minHeap: PriorityQueue<Position> = new PriorityQueue<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid, startPos);\r\n        this.minHeap.insert(startPos, 0);\r\n        while (this.minHeap.size() !== 0) {\r\n            let closestPosition: Position = this.minHeap.pop();\r\n            this.markAsVisited(closestPosition);\r\n            if (this.equalPosition(closestPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, closestPosition);\r\n            let closestDistance: number = this.pathValues.get(this.hash(closestPosition)).shortestPath;\r\n            for (let neighbor of neighbors) {\r\n                let newDistance: number = closestDistance + this.getDistance(grid, closestPosition, neighbor);\r\n                let neighborPathData: PathData = this.pathValues.get(this.hash(neighbor));\r\n                this.minHeap.insert(neighbor, newDistance);\r\n                if (newDistance < neighborPathData.shortestPath) {\r\n                    let pathData: PathData = {\r\n                        shortestPath: newDistance,\r\n                        isVisited: true,\r\n                        previousNode: closestPosition,\r\n                    };\r\n                    this.pathValues.set(this.hash(neighbor), pathData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public recalculatePath(grid: Node[][], startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.minHeap = new PriorityQueue<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n\r\n    private getDistance(grid: Node[][], current: Position, neighbor: Position): number {\r\n        let weightDifference = grid[neighbor.y][neighbor.x].weight - grid[current.y][current.x].weight;\r\n        return (\r\n            Math.pow(10000, weightDifference) *\r\n            Math.sqrt(Math.pow(Math.abs(current.x - neighbor.x), 2) + Math.pow(Math.abs(current.y - neighbor.y), 2))\r\n        );\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>, startPos: Position): void {\r\n        grid.forEach((row) => {\r\n            return row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let shortestPath: number;\r\n                if (this.equalPosition(startPos, nodePosition)) {\r\n                    shortestPath = 0;\r\n                } else {\r\n                    shortestPath = Infinity;\r\n                }\r\n                let pathData: PathData = { shortestPath: shortestPath, isVisited: false, previousNode: null };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    findShortestPath(finishPos: Position): void {\r\n        for (\r\n            let curPosition = finishPos;\r\n            curPosition != null;\r\n            curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n}\r\n","export interface Node {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport type Tuple<T> = [T, number];\r\n\r\nexport class PriorityQueue<T extends Node> {\r\n    heap: Tuple<T>[] = [];\r\n\r\n    constructor() {}\r\n\r\n    insert(val: T, priority: number) {\r\n        if (!this.heap.length || this.heap[this.heap.length - 1][1] > priority) {\r\n            this.heap.push([val, priority]);\r\n            return this.heap;\r\n        }\r\n\r\n        const tmp: Tuple<T>[] = [];\r\n        let found = false;\r\n\r\n        for (let i = 0; i < this.heap.length; i++) {\r\n            const p = this.heap[i][1];\r\n\r\n            if (priority >= p && !found) {\r\n                tmp.push([val, priority]);\r\n                found = true;\r\n            }\r\n\r\n            tmp.push(this.heap[i]);\r\n        }\r\n\r\n        return (this.heap = tmp);\r\n    }\r\n\r\n    has({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return !!foundNode;\r\n    }\r\n\r\n    get({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return foundNode && foundNode[0];\r\n    }\r\n\r\n    shift(priority: boolean) {\r\n        const tuple = this.heap.shift();\r\n        if (priority) {\r\n            return tuple;\r\n        }\r\n\r\n        return tuple ? tuple[0] : undefined;\r\n    }\r\n\r\n    pop() {\r\n        return this.heap.pop()[0];\r\n    }\r\n\r\n    priorities() {\r\n        return this.heap.map(([_, p]) => p);\r\n    }\r\n\r\n    values() {\r\n        return this.heap.map(([val]) => val);\r\n    }\r\n\r\n    size() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    toArray(values: boolean) {\r\n        if (values) {\r\n            return this.heap.map(([val]) => val);\r\n        }\r\n        return this.heap;\r\n    }\r\n}\r\n","import PathfindingAlgorithm from './PathfindingAlgorithm';\r\nimport Stack from './DataStructures/Stack';\r\nimport { Position, Node } from '../IPathfinder';\r\n\r\nexport default class DFS extends PathfindingAlgorithm {\r\n    stack: Stack<Position> = new Stack<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid);\r\n        this.stack.push(startPos);\r\n        while (!this.stack.isEmpty()) {\r\n            let curPosition: Position = this.stack.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.finalPath = this.visitedNodesInOrder;\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition).reverse();\r\n            for (let neighbor of neighbors) {\r\n                this.stack.push(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                this.pathValues.set(this.hash(nodePosition), { isVisited: false });\r\n            });\r\n        });\r\n    }\r\n\r\n    recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.stack = new Stack<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n}\r\n","export default class Stack<T> {\r\n    data: Array<T> = [];\r\n    top: number = 0;\r\n    public push(element: T): void {\r\n        this.data[this.top] = element;\r\n        this.top++;\r\n    }\r\n    public pop(): T {\r\n        this.top--;\r\n        return this.data[this.top];\r\n    }\r\n    // public peek(): T {\r\n    //     return this.data[this.top - 1];\r\n    // }\r\n    public isEmpty(): boolean {\r\n        return this.top === 0;\r\n    }\r\n}\r\n","import PathfindingAlgorithm, { PathData } from './PathfindingAlgorithm';\r\nimport Queue from './DataStructures/Queue';\r\nimport { Node, Position } from '../IPathfinder';\r\n\r\nexport default class BFS extends PathfindingAlgorithm {\r\n    queue: Queue<Position> = new Queue<Position>();\r\n\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid);\r\n        this.queue.push(startPos);\r\n        while (!this.queue.isEmpty()) {\r\n            let curPosition: Position = this.queue.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition);\r\n            for (let neighbor of neighbors) {\r\n                this.queue.push(neighbor);\r\n                this.pathValues.set(this.hash(neighbor), { isVisited: true, previousNode: curPosition });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let pathData: PathData = {\r\n                    isVisited: false,\r\n                    previousNode: null,\r\n                };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    private findShortestPath(finishPos: Position) {\r\n        for (\r\n            let curPosition = finishPos;\r\n            curPosition != null;\r\n            curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n\r\n    recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.queue = new Queue<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n}\r\n","export default class Queue<T> {\r\n    data: Array<T> = [];\r\n    push(element: T) {\r\n        this.data.push(element);\r\n    }\r\n    pop(): T {\r\n        return this.data.shift();\r\n    }\r\n    isEmpty(): boolean {\r\n        return this.data.length === 0;\r\n    }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\n\r\nexport default class RecursiveDivision extends MazeGenerator {\r\n    gapMap: Map<string, Position>;\r\n    public generateWalls(): Position[] {\r\n        this.wallsCreatedInOrder = [];\r\n        this.gapMap = new Map<string, Position>();\r\n        const ul: Position = { x: 0, y: 0 };\r\n        const lr: Position = { x: GRID_W - 1, y: GRID_H - 1 };\r\n        this.divide(ul, lr);\r\n        return this.wallsCreatedInOrder;\r\n    }\r\n\r\n    private divide(ul: Position, lr: Position) {\r\n        let width: number = lr.x - ul.x + 1;\r\n        let height: number = lr.y - ul.y + 1;\r\n        if (width < 2 || height < 2 || (width === 2 && height === 2)) {\r\n            // || (height === 3 && width === 2) || (height ===  && width === 2)) {\r\n            return;\r\n        }\r\n        let vertical: boolean = width > height;\r\n        let splitIdx: number;\r\n        let gap: Position;\r\n        let found = false;\r\n        while (!found) {\r\n            if (vertical) {\r\n                splitIdx = this.getRandom(ul.x + 1, lr.x - 1);\r\n                gap = { x: splitIdx, y: this.getRandom(ul.y, lr.y) };\r\n                console.log(`Trying ${splitIdx}, width: ${width} heoght: ${height}`);\r\n                let up: Position = { x: splitIdx, y: ul.y - 1 };\r\n                let down: Position = { x: splitIdx, y: lr.y + 1 };\r\n                if (width > 2 && height > 2) {\r\n                    found = !this.gapMap.has(this.hash(up)) && !this.gapMap.has(this.hash(down));\r\n                } else {\r\n                    found = true;\r\n                }\r\n            } else {\r\n                splitIdx = this.getRandom(ul.y + 1, lr.y - 1);\r\n                gap = { x: this.getRandom(ul.x, lr.x), y: splitIdx };\r\n                console.log(`Trying ${splitIdx}, width: ${width} heoght: ${height}`);\r\n                let left: Position = { x: ul.x - 1, y: splitIdx };\r\n                let right: Position = { x: lr.x + 1, y: splitIdx };\r\n                if (width > 2 && height > 2) {\r\n                    found = !this.gapMap.has(this.hash(left)) && !this.gapMap.has(this.hash(right));\r\n                } else {\r\n                    found = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gapMap.set(this.hash(gap), gap);\r\n\r\n        for (let i = vertical ? ul.y : ul.x; i <= (vertical ? lr.y : lr.x); i++) {\r\n            if (i === (vertical ? gap.y : gap.x)) continue;\r\n            let pos: Position;\r\n            if (vertical) {\r\n                pos = { x: splitIdx, y: i };\r\n            } else {\r\n                pos = { x: i, y: splitIdx };\r\n            }\r\n            this.wallsCreatedInOrder.push(pos);\r\n        }\r\n\r\n        let newLr: Position;\r\n        let newUl: Position;\r\n        if (vertical) {\r\n            newLr = { x: splitIdx - 1, y: lr.y };\r\n            newUl = { x: splitIdx + 1, y: ul.y };\r\n        } else {\r\n            newLr = { x: lr.x, y: splitIdx - 1 };\r\n            newUl = { x: ul.x, y: splitIdx + 1 };\r\n        }\r\n        this.divide(ul, newLr);\r\n        this.divide(newUl, lr);\r\n    }\r\n    // checkSplit(ul: Position, lr: Position, splitIdx: number, vertical: boolean): boolean {\r\n    //     let wallStart: Position;\r\n    //     let wallFinish: Position;\r\n    //     if (vertical) {\r\n    //         wallStart = { x: splitIdx, y: ul.y };\r\n    //         wallFinish = { x: splitIdx, y: lr.y };\r\n    //     } else {\r\n    //         wallStart = { x: ul.x, y: splitIdx };\r\n    //         wallFinish = { x: lr.x, y: splitIdx };\r\n    //     }\r\n    // }\r\n\r\n    private hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n\r\n    // private buildWall(min: number, max: number, splitIdx: number, vertical: boolean): void {\r\n    //     let divLen = max - min;\r\n    //     let wallGap = this.getRandom(divLen);\r\n    //     for (let i = min; i < max; i++) {\r\n    //         if (i === wallGap) continue;\r\n    //         let pos: Position;\r\n    //         if (vertical) {\r\n    //             pos = { x: splitIdx, y: i };\r\n    //         } else {\r\n    //             pos = { x: i, y: splitIdx };\r\n    //         }\r\n    //         this.wallsCreatedInOrder.push(pos);\r\n    //     }\r\n    // }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\nimport WallCarver from './wallCarver';\r\n\r\nexport default class RecursiveBacktracking extends WallCarver {\r\n    visited: Map<String, boolean>;\r\n    public generateWalls(): Position[] {\r\n        this.wallsCreatedInOrder = [];\r\n        this.visited = new Map<string, boolean>();\r\n        this.createStartingWalls();\r\n        let randomPos: Position = {\r\n            x: 2 * this.getRandom(1, (GRID_W - 1) / 2) - 1,\r\n            y: 2 * this.getRandom(1, (GRID_H - 1) / 2) - 1,\r\n        };\r\n        this.carveWalls(randomPos);\r\n        return this.wallsCreatedInOrder;\r\n    }\r\n\r\n    carveWalls(current: Position): void {\r\n        this.visit(current);\r\n        let neighbors: Position[] = this.getUnvisitedNeighbors(current);\r\n        for (let neighbor of neighbors) {\r\n            console.log(neighbor);\r\n            if (!this.isVisisted(neighbor)) {\r\n                this.placeWallBetweenPositions(current, neighbor);\r\n                this.carveWalls(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getUnvisitedNeighbors(current: Position): Position[] {\r\n        let right: Position = { x: current.x + 2, y: current.y };\r\n        let up: Position = { x: current.x, y: current.y - 2 };\r\n        let left: Position = { x: current.x - 2, y: current.y };\r\n        let bot: Position = { x: current.x, y: current.y + 2 };\r\n        let neighbors: Position[] = [right, up, left, bot];\r\n        neighbors = neighbors.filter((pos: Position) => {\r\n            return this.positionInBounds(pos);\r\n        });\r\n        return this.randomisePositions(neighbors);\r\n    }\r\n\r\n    private randomisePositions(positions: Position[]): Position[] {\r\n        return positions.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    private visit(position: Position): void {\r\n        this.visited.set(this.hash(position), true);\r\n    }\r\n\r\n    private isVisisted(position: Position): boolean {\r\n        return this.visited.has(this.hash(position));\r\n    }\r\n\r\n    private hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\n\r\nexport default abstract class WallCarver extends MazeGenerator {\r\n    protected createStartingWalls(): void {\r\n        for (let i = 0; i < GRID_W; i++) {\r\n            let topBorderWall: Position = { x: i, y: 0 };\r\n            let botBorderWall: Position = { x: i, y: GRID_H - 1 };\r\n            this.addWall(topBorderWall);\r\n            this.addWall(botBorderWall);\r\n        }\r\n        for (let x = 0; x < GRID_W; x += 2) {\r\n            for (let y = 1; y < GRID_H - 1; y++) {\r\n                let middleWall: Position = { x: x, y: y };\r\n                this.addWall(middleWall);\r\n            }\r\n        }\r\n        for (let x = 1; x < GRID_W - 1; x += 2) {\r\n            for (let y = 2; y < GRID_H - 2; y += 2) {\r\n                let crossWall: Position = { x: x, y: y };\r\n                this.addWall(crossWall);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected placeWallBetweenPositions(current: Position, neighbor: Position): void {\r\n        let positionBetween: Position = {\r\n            x: Math.floor((current.x + neighbor.x) / 2),\r\n            y: Math.floor((current.y + neighbor.y) / 2),\r\n        };\r\n        this.addWall(positionBetween);\r\n    }\r\n\r\n    protected positionInBounds(position: Position): boolean {\r\n        return position.x > 0 && position.x < GRID_W - 1 && position.y > 0 && position.y < GRID_H - 1;\r\n    }\r\n}\r\n","// Credit to https://github.com/Bartvds/lorez/blob/master/src/extra/PerlinNoise.ts\r\n\r\nexport default class PerlinNoise {\r\n\r\n\tprivate p: number[];\r\n\tprivate permutation: number[];\r\n\r\n\tconstructor() {\r\n\t\t// To remove the need for index wrapping, double the permutation table length\r\n\t\tthis.permutation = [ 151, 160, 137, 91, 90, 15,\r\n\t\t\t131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\r\n\t\t\t190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\r\n\t\t\t88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\r\n\t\t\t77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\r\n\t\t\t102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\r\n\t\t\t135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\r\n\t\t\t5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\r\n\t\t\t223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\r\n\t\t\t129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\r\n\t\t\t251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\r\n\t\t\t49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n\t\t\t138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\r\n\t\t];\r\n\t\tthis.p = new Array(512);\r\n\r\n\t\tfor (var i = 0; i < 256; i++) {\r\n\t\t\tthis.p[256 + i] = this.p[i] = this.permutation[i];\r\n\t\t}\r\n\t}\r\n\r\n\tnoise(x: number, y: number, z: number): number {\r\n\t\tvar X = Math.floor(x) & 255;     // FIND UNIT CUBE THAT\r\n\t\tvar Y = Math.floor(y) & 255;     // CONTAINS POINT.\r\n\t\tvar Z = Math.floor(z) & 255;\r\n\r\n\t\tx -= Math.floor(x);              // FIND RELATIVE X,Y,Z\r\n\t\ty -= Math.floor(y);              // OF POINT IN CUBE.\r\n\t\tz -= Math.floor(z);\r\n\r\n\t\tvar u = this.fade(x);            // COMPUTE FADE CURVES\r\n\t\tvar v = this.fade(y);            // FOR EACH OF X,Y,Z.\r\n\t\tvar w = this.fade(z);\r\n\r\n\t\tvar A = this.p[X] + Y;\r\n\t\tvar AA = this.p[A] + Z;\r\n\t\tvar AB = this.p[A + 1] + Z;      // HASH COORDINATES OF\r\n\r\n\t\tvar B = this.p[X + 1] + Y;\r\n\t\tvar BA = this.p[B] + Z;\r\n\t\tvar BB = this.p[B + 1] + Z;      // THE 8 CUBE CORNERS,\r\n\r\n\t\treturn this.scale(this.lerp(w, this.lerp(v, this.lerp(u, this.grad(this.p[AA  ], x, y, z),  // AND ADD\r\n\t\t\t\t\tthis.grad(this.p[BA], x - 1, y, z)), // BLENDED\r\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB], x, y - 1, z),  // RESULTS\r\n\t\t\t\t\tthis.grad(this.p[BB], x - 1, y - 1, z))),// FROM  8\r\n\t\t\tthis.lerp(v, this.lerp(u, this.grad(this.p[AA + 1], x, y, z - 1),  // CORNERS\r\n\t\t\t\t\tthis.grad(this.p[BA + 1], x - 1, y, z - 1)), // OF CUBE\r\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB + 1], x, y - 1, z - 1),\r\n\t\t\t\t\tthis.grad(this.p[BB + 1], x - 1, y - 1, z - 1)))));\r\n\t}\r\n\r\n\tfade(t: number): number {\r\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\r\n\t}\r\n\r\n\tlerp(t: number, a: number, b: number): number {\r\n\t\treturn a + t * (b - a);\r\n\t}\r\n\r\n\tgrad(hash: number, x: number, y: number, z: number): number {\r\n\t\tvar h = hash & 15;      // CONVERT LO 4 BITS OF HASH CODE\r\n\t\tvar u = h < 8 ? x : y;  // INTO 12 GRADIENT DIRECTIONS.\r\n\t\tvar v = h < 4 ? y : h == 12 || h == 14 ? x : z;\r\n\t\treturn ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\r\n\t}\r\n\r\n\tscale(n: number): number {\r\n\t\treturn (1 + n) / 2;\r\n\t}\r\n}"],"sourceRoot":""}