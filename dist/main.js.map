{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/IPathfinder.tsx","webpack:///./src/Algorithms/PathfindingAlgorithm.tsx","webpack:///./src/mazes/MazeGenerator.ts","webpack:///./src/mazes/wallCarver.ts","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/App.tsx","webpack:///./src/Pathfinder.tsx","webpack:///./src/Cell.tsx","webpack:///./src/Navbar.tsx","webpack:///./src/Algorithms/Dijkstra.tsx","webpack:///./src/Algorithms/DataStructures/PriorityQueue.tsx","webpack:///./src/Algorithms/DFS.ts","webpack:///./src/Algorithms/DataStructures/Stack.tsx","webpack:///./src/Algorithms/BFS.tsx","webpack:///./src/Algorithms/DataStructures/Queue.ts","webpack:///./src/mazes/RecursiveDivision.ts","webpack:///./src/mazes/RecursiveBacktracking.ts","webpack:///./src/mazes/Ellers.ts","webpack:///./src/Algorithms/Perlin/PerlinNoise.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","screenWidth","Math","floor","window","innerWidth","screenHeight","innerHeight","GRID_W","GRID_H","DEFAULT_START_POS","x","y","DEFAULT_FINISH_POS","UPDATE_RATE","MouseState","NodeType","pathValues","Map","finalPath","visitedNodesInOrder","this","slice","length","grid","position","neighbors","push","filter","neighbor","nodeType","Wall","isVisited","cornerCheck","hash","pathData","newPathData","set","pos1","pos2","toString","walls","topBorderWall","botBorderWall","leftBorderWall","rightBorderWall","min","max","random","wallsCreatedInOrder","ADJUSTED_WIDTH","ADJUSTED_HEIGHT","WallCarver","current","positionBetween","addWall","middleWall","crossWall","ReactDOM","render","document","getElementById","App","Component","props","super","state","className","Pathfinder","references","Array","fill","map","createRef","row","curRow","col","newNode","Unvisited","weight","startPos","finishPos","midpointPos","mouseState","PlacingWall","isMouseDown","updateLock","perlinToggle","prevAlgorithm","nextProps","nextState","node","eventType","Disabled","onMouseDown","onMouseUp","onMouseEnter","MovingStart","MovingFinish","MovingMidpoint","isEmpty","isStart","isFinish","isMidpoint","RemovingWall","clearPath","setState","recalculatePath","visitedPaths","finalPaths","calculatePath","produceVisitedInOrder","produceFinalPath","console","log","idx","visited","pos","VisitedOne","VisitedOverlap","VisitedTwo","path","ShortestPath","algorithm","visualiseAlgorithm","visitedInOrder","shortestPath","lockRender","visualiseVisited","visualisePath","concat","unlockRender","count","Promise","resolve","setTimeout","ref","includes","perlin","seed","newWeight","noise","mazeGenerator","setupWalls","getSetup","generateWalls","setupStartingWalls","visualizeMaze","wallAlreadyPlaced","wall","nextMidPoint","performAlgorithm","generateLandscape","generateMaze","rowIdx","cell","colIdx","updateMouseState","setMidpoint","nodeRef","Cell","event","nativeEvent","which","type","rbgVal","backgroundColor","convertWeightToGreyscale","id","style","handleMouseEvent","onContextMenu","preventDefault","Navbar","onClick","Dijkstra","minHeap","PriorityQueue","reset","setMap","insert","size","closestPosition","pop","markAsVisited","equalPosition","findShortestPath","getNeighbors","closestDistance","newDistance","getDistance","neighborPathData","previousNode","weightDifference","pow","sqrt","abs","forEach","nodePosition","Infinity","curPosition","unshift","clear","heap","val","priority","tmp","found","find","foundNode","tuple","shift","undefined","_","values","DFS","stack","reverse","data","top","element","BFS","queue","RecursiveDivision","lr","divide","ul","splitIdx","gap","newLr","newUl","width","height","vertical","randomEven","randomOdd","getRandom","RecursiveBacktracking","randomStartingPos","carveWalls","visit","getUnvisitedNeighbors","isVisisted","placeWallBetweenPositions","positionInBounds","randomisePositions","positions","sort","has","Ellers","currentRow","Uptree","mergeRow","prevRow","extendToNextRow","isRoot","addEntry","addTopWall","randomBool","getEntry","sameClass","mergeSets","addRightWall","set1","set2","getRoot","index1","index2","index","permutation","z","X","Y","Z","u","fade","v","w","A","AA","AB","B","BA","BB","scale","lerp","grad","a","b","h"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = React;","import PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\n\r\nconst screenWidth = Math.floor((0.95 * window.innerWidth) / 25);\r\nconst screenHeight = Math.floor((0.8 * window.innerHeight) / 25);\r\nexport const GRID_W = screenWidth % 2 === 0 ? screenWidth - 1 : screenWidth;\r\nexport const GRID_H = screenHeight % 2 === 0 ? screenHeight - 1 : screenHeight;\r\nexport const DEFAULT_START_POS: Position = { x: Math.floor(GRID_W / 4), y: Math.floor(GRID_H / 2) };\r\nexport const DEFAULT_FINISH_POS: Position = { x: GRID_W - DEFAULT_START_POS.x - 1, y: DEFAULT_START_POS.y };\r\nexport const UPDATE_RATE = 5;\r\n\r\nexport interface Position {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport enum MouseState {\r\n    PlacingWall,\r\n    RemovingWall,\r\n    MovingStart,\r\n    MovingFinish,\r\n    MovingMidpoint,\r\n    Disabled,\r\n}\r\nexport enum NodeType {\r\n    Unvisited,\r\n    VisitedOne,\r\n    VisitedTwo,\r\n    VisitedOverlap,\r\n    Wall,\r\n    ShortestPath,\r\n}\r\nexport interface Node {\r\n    position: Position;\r\n    nodeType: NodeType;\r\n    weight: number;\r\n}\r\n","import { GRID_H, GRID_W, Node, NodeType, Position } from '../IPathfinder';\r\n\r\nexport interface PathData {\r\n    isVisited: boolean;\r\n    shortestPath?: number;\r\n    previousNode?: Position;\r\n}\r\n\r\nexport default abstract class PathfindingAlgorithm {\r\n    pathValues: Map<string, PathData> = new Map<string, PathData>();\r\n    finalPath: Array<Position> = [];\r\n    visitedNodesInOrder: Array<Position> = [];\r\n\r\n    protected abstract setMap(grid: Node[][], startPos?: Position): void;\r\n\r\n    public abstract calculatePath(grid: Node[][], startPos: Position, finishPos: Position): void;\r\n\r\n    public produceVisitedInOrder(): Position[] {\r\n        return this.visitedNodesInOrder.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    public produceFinalPath(): Position[] {\r\n        return this.finalPath.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    protected getNeighbors(grid: Node[][], position: Position): Array<Position> {\r\n        let neighbors: Array<Position> = [];\r\n        neighbors.push({ x: position.x + 1, y: position.y });\r\n        neighbors.push({ x: position.x, y: position.y + 1 });\r\n        neighbors.push({ x: position.x, y: position.y - 1 });\r\n        neighbors.push({ x: position.x - 1, y: position.y });\r\n\r\n        neighbors.push({ x: position.x - 1, y: position.y + 1 });\r\n        neighbors.push({ x: position.x + 1, y: position.y + 1 });\r\n        neighbors.push({ x: position.x + 1, y: position.y - 1 });\r\n        neighbors.push({ x: position.x - 1, y: position.y - 1 });\r\n\r\n        return neighbors.filter((neighbor) => {\r\n            return (\r\n                neighbor.x >= 0 &&\r\n                neighbor.x < GRID_W &&\r\n                neighbor.y >= 0 &&\r\n                neighbor.y < GRID_H &&\r\n                grid[neighbor.y][neighbor.x].nodeType !== NodeType.Wall &&\r\n                !this.isVisited(neighbor) &&\r\n                this.cornerCheck(position, neighbor, grid)\r\n            );\r\n        });\r\n    }\r\n\r\n    private cornerCheck(position: Position, neighbor: Position, grid: Node[][]): boolean {\r\n        return (\r\n            grid[position.y][neighbor.x].nodeType !== NodeType.Wall ||\r\n            grid[neighbor.y][position.x].nodeType !== NodeType.Wall\r\n        );\r\n    }\r\n\r\n    protected isVisited(position: Position): boolean {\r\n        return this.pathValues.get(this.hash(position)).isVisited;\r\n    }\r\n\r\n    protected markAsVisited(position: Position): void {\r\n        this.visitedNodesInOrder.push(position);\r\n        let pathData: PathData = this.pathValues.get(this.hash(position));\r\n        let newPathData: PathData = {\r\n            ...pathData,\r\n            isVisited: true,\r\n        };\r\n        this.pathValues.set(this.hash(position), newPathData);\r\n    }\r\n\r\n    protected equalPosition(pos1: Position, pos2: Position) {\r\n        return pos1.x === pos2.x && pos1.y === pos2.y;\r\n    }\r\n\r\n    protected hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n\r\n    protected clear(): void {\r\n        this.visitedNodesInOrder = [];\r\n        this.finalPath = [];\r\n        this.pathValues = new Map<string, PathData>();\r\n    }\r\n\r\n    protected abstract reset(): void;\r\n}\r\n","import { Position, GRID_H, GRID_W } from './../IPathfinder';\r\nexport default abstract class MazeGenerator {\r\n    wallsCreatedInOrder: Position[];\r\n    public abstract generateWalls(): Position[];\r\n    public getSetup(): Position[] {\r\n        let walls: Position[] = [];\r\n        for (let i = 0; i < GRID_W; i++) {\r\n            let topBorderWall: Position = { x: i, y: 0 };\r\n            let botBorderWall: Position = { x: i, y: GRID_H - 1 };\r\n            walls.push(topBorderWall);\r\n            walls.push(botBorderWall);\r\n        }\r\n        for (let i = 1; i < GRID_H - 1; i++) {\r\n            let leftBorderWall: Position = { x: 0, y: i };\r\n            let rightBorderWall: Position = { x: GRID_W - 1, y: i };\r\n            walls.push(leftBorderWall);\r\n            walls.push(rightBorderWall);\r\n        }\r\n        return walls;\r\n    }\r\n    protected getRandom(min: number, max: number): number {\r\n        return min + Math.floor((max - min + 1) * Math.random());\r\n    }\r\n    protected addWall(position: Position) {\r\n        this.wallsCreatedInOrder.push(position);\r\n    }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\n\r\nexport const ADJUSTED_WIDTH = (GRID_W - 1) / 2;\r\nexport const ADJUSTED_HEIGHT = (GRID_H - 1) / 2;\r\n\r\nexport default abstract class WallCarver extends MazeGenerator {\r\n    protected placeWallBetweenPositions(current: Position, neighbor: Position): void {\r\n        let positionBetween: Position = {\r\n            x: Math.floor((current.x + neighbor.x) / 2),\r\n            y: Math.floor((current.y + neighbor.y) / 2),\r\n        };\r\n        this.addWall(positionBetween);\r\n    }\r\n\r\n    protected positionInBounds(position: Position): boolean {\r\n        return position.x > 0 && position.x < GRID_W - 1 && position.y > 0 && position.y < GRID_H - 1;\r\n    }\r\n\r\n    public getSetup(): Position[] {\r\n        let walls: Position[] = [];\r\n        for (let i = 0; i < GRID_W; i++) {\r\n            let topBorderWall: Position = { x: i, y: 0 };\r\n            let botBorderWall: Position = { x: i, y: GRID_H - 1 };\r\n            walls.push(topBorderWall);\r\n            walls.push(botBorderWall);\r\n        }\r\n        for (let x = 0; x < GRID_W; x += 2) {\r\n            for (let y = 1; y < GRID_H - 1; y++) {\r\n                let middleWall: Position = { x: x, y: y };\r\n                walls.push(middleWall);\r\n            }\r\n        }\r\n        for (let x = 1; x < GRID_W - 1; x += 2) {\r\n            for (let y = 2; y < GRID_H - 2; y += 2) {\r\n                let crossWall: Position = { x: x, y: y };\r\n                walls.push(crossWall);\r\n            }\r\n        }\r\n        return walls;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","module.exports = ReactDOM;","import * as React from 'react';\r\nimport Pathfinder from '../Pathfinder';\r\nimport { Component } from 'react';\r\n\r\nexport default class App extends Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"app\">\r\n                <Pathfinder />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n    Node,\r\n    NodeType,\r\n    Position,\r\n    MouseState,\r\n    GRID_W,\r\n    GRID_H,\r\n    DEFAULT_START_POS,\r\n    DEFAULT_FINISH_POS,\r\n    UPDATE_RATE,\r\n} from './IPathfinder';\r\nimport { Component, createRef, RefObject } from 'react';\r\nimport Cell from './Cell';\r\nimport Navbar from './Navbar';\r\nimport PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\nimport PerlinNoise from './Algorithms/Perlin/PerlinNoise';\r\nimport MazeGenerator from './mazes/MazeGenerator';\r\n\r\ninterface State {\r\n    grid: Node[][];\r\n    startPos: Position;\r\n    finishPos: Position;\r\n    midpointPos: Position;\r\n    mouseState: MouseState;\r\n    isMouseDown: boolean;\r\n    updateLock: boolean;\r\n    perlinToggle: boolean;\r\n    prevAlgorithm: PathfindingAlgorithm;\r\n}\r\n\r\nexport default class Pathfinder extends Component<{}, State> {\r\n    references: Array<Array<RefObject<HTMLDivElement> | any>> = Array(GRID_H)\r\n        .fill([])\r\n        .map(() =>\r\n            Array(GRID_W)\r\n                .fill(0)\r\n                .map(() => createRef()),\r\n        );\r\n    constructor(props: any) {\r\n        super(props);\r\n        let grid: Node[][] = [];\r\n        for (let row = 0; row < GRID_H; row++) {\r\n            let curRow: Array<Node> = [];\r\n            for (let col = 0; col < GRID_W; col++) {\r\n                let newNode: Node = { position: { x: col, y: row }, nodeType: NodeType.Unvisited, weight: 0 };\r\n                curRow.push(newNode);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.state = {\r\n            grid: grid,\r\n            startPos: DEFAULT_START_POS,\r\n            finishPos: DEFAULT_FINISH_POS,\r\n            midpointPos: null,\r\n            mouseState: MouseState.PlacingWall,\r\n            isMouseDown: false,\r\n            updateLock: false,\r\n            perlinToggle: false,\r\n            prevAlgorithm: null,\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<{}>, nextState: Readonly<State>): boolean {\r\n        return !nextState.updateLock;\r\n    }\r\n\r\n    clearPath(): Node[][] {\r\n        let grid: Node[][] = this.state.grid;\r\n        grid = grid.map((row) => {\r\n            return row.map((node) => {\r\n                return {\r\n                    ...node,\r\n                    nodeType: node.nodeType === NodeType.Wall ? NodeType.Wall : NodeType.Unvisited,\r\n                };\r\n            });\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    updateMouseState(position: Position, eventType: string): void {\r\n        if (this.state.mouseState === MouseState.Disabled) return;\r\n        switch (eventType) {\r\n            case 'mousedown': {\r\n                this.onMouseDown(position);\r\n                break;\r\n            }\r\n            case 'mouseup': {\r\n                this.onMouseUp();\r\n                break;\r\n            }\r\n            case 'mouseenter': {\r\n                this.onMouseEnter(position);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseDown(position: Position) {\r\n        let { grid, mouseState, isMouseDown, prevAlgorithm } = this.state;\r\n        let nodeType: NodeType = grid[position.y][position.x].nodeType;\r\n        if (\r\n            (mouseState === MouseState.MovingStart ||\r\n                mouseState === MouseState.MovingFinish ||\r\n                mouseState === MouseState.MovingMidpoint) &&\r\n            !this.isEmpty(position)\r\n        )\r\n            return;\r\n\r\n        if (this.isStart(position)) {\r\n            mouseState = MouseState.MovingStart;\r\n        } else if (this.isFinish(position)) {\r\n            mouseState = MouseState.MovingFinish;\r\n        } else if (this.isMidpoint(position)) {\r\n            mouseState = MouseState.MovingMidpoint;\r\n        } else if (nodeType === NodeType.Unvisited) {\r\n            mouseState = MouseState.PlacingWall;\r\n        } else {\r\n            mouseState = MouseState.RemovingWall;\r\n        }\r\n\r\n        if (this.isEmpty(position)) {\r\n            if (prevAlgorithm !== null) {\r\n                grid = this.clearPath();\r\n                prevAlgorithm = null;\r\n            }\r\n            if (nodeType === NodeType.Wall) {\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n            } else {\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n            }\r\n        }\r\n        isMouseDown = true;\r\n        this.setState({ grid: grid, mouseState: mouseState, isMouseDown: isMouseDown, prevAlgorithm: prevAlgorithm });\r\n    }\r\n\r\n    private onMouseUp() {\r\n        let mouseState = MouseState.PlacingWall;\r\n        let isMouseDown = false;\r\n        this.setState({ mouseState: mouseState, isMouseDown: isMouseDown });\r\n    }\r\n\r\n    private onMouseEnter(position: Position) {\r\n        let { grid, startPos, finishPos, midpointPos, mouseState, isMouseDown, prevAlgorithm } = this.state;\r\n        if (!isMouseDown || this.isStart(position) || this.isFinish(position) || this.isMidpoint(position)) return;\r\n\r\n        switch (mouseState) {\r\n            case MouseState.MovingStart:\r\n                startPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, midpointPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ startPos: startPos });\r\n                }\r\n                break;\r\n            case MouseState.MovingFinish:\r\n                finishPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, midpointPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ finishPos: finishPos });\r\n                }\r\n                break;\r\n            case MouseState.MovingMidpoint:\r\n                midpointPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, midpointPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ midpointPos: midpointPos });\r\n                }\r\n                break;\r\n            case MouseState.PlacingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                this.setState({ grid: grid });\r\n                break;\r\n            case MouseState.RemovingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                this.setState({ grid: grid });\r\n                break;\r\n        }\r\n    }\r\n\r\n    private recalculatePath(\r\n        startPos: Position,\r\n        finishPos: Position,\r\n        midpointPos: Position,\r\n        prevAlgorithm: PathfindingAlgorithm,\r\n    ) {\r\n        let grid: Node[][] = this.clearPath();\r\n        let visitedPaths: Position[][] = [];\r\n        let finalPaths: Position[][] = [];\r\n        if (midpointPos === null) {\r\n            prevAlgorithm.calculatePath(grid, startPos, finishPos);\r\n            visitedPaths.push(prevAlgorithm.produceVisitedInOrder());\r\n            finalPaths.push(prevAlgorithm.produceFinalPath());\r\n        } else {\r\n            prevAlgorithm.calculatePath(grid, startPos, midpointPos);\r\n            visitedPaths.push(prevAlgorithm.produceVisitedInOrder());\r\n            finalPaths.push(prevAlgorithm.produceFinalPath());\r\n\r\n            prevAlgorithm.calculatePath(grid, midpointPos, finishPos);\r\n            visitedPaths.push(prevAlgorithm.produceVisitedInOrder());\r\n            finalPaths.push(prevAlgorithm.produceFinalPath());\r\n        }\r\n\r\n        console.log(visitedPaths);\r\n\r\n        for (let idx = 0; idx < visitedPaths.length; idx++) {\r\n            let visited: Position[] = visitedPaths[idx];\r\n            for (let pos of visited) {\r\n                if (idx === 0) {\r\n                    grid[pos.y][pos.x].nodeType = NodeType.VisitedOne;\r\n                } else if (grid[pos.y][pos.x].nodeType === NodeType.VisitedOne) {\r\n                    grid[pos.y][pos.x].nodeType = NodeType.VisitedOverlap;\r\n                } else {\r\n                    grid[pos.y][pos.x].nodeType = NodeType.VisitedTwo;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let path of finalPaths) {\r\n            for (let pos of path) {\r\n                grid[pos.y][pos.x].nodeType = NodeType.ShortestPath;\r\n            }\r\n        }\r\n\r\n        this.setState({ grid: grid, startPos: startPos, finishPos: finishPos, midpointPos: midpointPos });\r\n    }\r\n\r\n    private isEmpty(position: Position) {\r\n        return !this.isStart(position) && !this.isFinish(position) && !this.isMidpoint(position);\r\n    }\r\n\r\n    private isStart(position: Position) {\r\n        return position.x === this.state.startPos.x && position.y === this.state.startPos.y;\r\n    }\r\n\r\n    private isFinish(position: Position) {\r\n        return position.x === this.state.finishPos.x && position.y === this.state.finishPos.y;\r\n    }\r\n\r\n    private isMidpoint(position: Position) {\r\n        return (\r\n            this.state.midpointPos !== null &&\r\n            position.x === this.state.midpointPos.x &&\r\n            position.y === this.state.midpointPos.y\r\n        );\r\n    }\r\n\r\n    private performAlgorithm(algorithm: PathfindingAlgorithm): void {\r\n        let midpointPos = this.state.midpointPos;\r\n        this.setState({ prevAlgorithm: algorithm, mouseState: MouseState.Disabled });\r\n        let visitedPaths: Position[][] = [];\r\n        let finalPaths: Position[][] = [];\r\n        if (midpointPos === null) {\r\n            algorithm.calculatePath(this.state.grid, this.state.startPos, this.state.finishPos);\r\n            visitedPaths.push(algorithm.produceVisitedInOrder());\r\n            finalPaths.push(algorithm.produceFinalPath());\r\n        } else {\r\n            algorithm.calculatePath(this.state.grid, this.state.startPos, this.state.midpointPos);\r\n            visitedPaths.push(algorithm.produceVisitedInOrder());\r\n            finalPaths.push(algorithm.produceFinalPath());\r\n\r\n            algorithm.calculatePath(this.state.grid, this.state.midpointPos, this.state.finishPos);\r\n            visitedPaths.push(algorithm.produceVisitedInOrder());\r\n            finalPaths.push(algorithm.produceFinalPath());\r\n        }\r\n\r\n        this.visualiseAlgorithm(visitedPaths, finalPaths);\r\n        this.setState({ mouseState: MouseState.PlacingWall });\r\n    }\r\n\r\n    private visualiseAlgorithm(visitedInOrder: Position[][], shortestPath: Position[][]): void {\r\n        (async () => {\r\n            this.lockRender();\r\n            for (let idx = 0; idx < visitedInOrder.length; idx++) {\r\n                let visited: Position[] = visitedInOrder[idx];\r\n                await this.visualiseVisited(visited, idx);\r\n            }\r\n\r\n            await this.visualisePath([].concat(...shortestPath));\r\n            this.unlockRender();\r\n        })();\r\n    }\r\n\r\n    private visualiseVisited(visitedInOrder: Array<Position>, count: number): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= visitedInOrder.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === visitedInOrder.length) {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, UPDATE_RATE);\r\n                    } else {\r\n                        let position: Position = visitedInOrder[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (\r\n                            !className.includes('cell-start') &&\r\n                            !className.includes('cell-finish') &&\r\n                            !className.includes('cell-midpoint')\r\n                        ) {\r\n                            if (className.includes('cell-visited-0')) {\r\n                                ref.current.className = `cell cell-visited-overlap`;\r\n                            } else {\r\n                                ref.current.className = `cell cell-visited-${count}`;\r\n                            }\r\n                            let grid: Node[][] = this.state.grid;\r\n                            if (count === 0) {\r\n                                grid[position.y][position.x].nodeType = NodeType.VisitedOne;\r\n                            } else if (grid[position.y][position.x].nodeType === NodeType.VisitedOne) {\r\n                                grid[position.y][position.x].nodeType = NodeType.VisitedOverlap;\r\n                            } else {\r\n                                grid[position.y][position.x].nodeType = NodeType.VisitedTwo;\r\n                            }\r\n                            this.setState({ grid: grid });\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private visualisePath(shortestPath: Position[]): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === shortestPath.length) {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, UPDATE_RATE);\r\n                    } else {\r\n                        let position: Position = shortestPath[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (\r\n                            !className.includes('cell-start') &&\r\n                            !className.includes('cell-finish') &&\r\n                            !className.includes('cell-midpoint')\r\n                        ) {\r\n                            ref.current.className = 'cell cell-shortestPath';\r\n                            let grid: Node[][] = this.state.grid;\r\n                            grid[position.y][position.x].nodeType = NodeType.ShortestPath;\r\n                            this.setState({ grid: grid });\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private lockRender() {\r\n        this.setState({ updateLock: true });\r\n    }\r\n\r\n    private unlockRender() {\r\n        this.setState({ updateLock: false });\r\n    }\r\n\r\n    private generateLandscape() {\r\n        const STEEPNESS: number = 0.2;\r\n        const perlin: PerlinNoise = new PerlinNoise();\r\n        const seed: number = Math.floor(Math.random() * 10000);\r\n\r\n        let grid: Node[][] = this.state.grid;\r\n        for (let y: number = 0; y < GRID_H; y++) {\r\n            for (let x: number = 0; x < GRID_W; x++) {\r\n                let newWeight = perlin.noise(x * STEEPNESS + seed, y * STEEPNESS + seed, 0);\r\n                grid[y][x].weight = newWeight;\r\n            }\r\n        }\r\n        console.log(grid);\r\n        this.setState({ grid: grid });\r\n    }\r\n\r\n    private generateMaze(mazeGenerator: MazeGenerator): void {\r\n        (async () => {\r\n            this.lockRender();\r\n            let setupWalls: Position[] = mazeGenerator.getSetup();\r\n            let walls: Position[] = mazeGenerator.generateWalls();\r\n            await this.setupStartingWalls(setupWalls);\r\n            await this.visualizeMaze(walls);\r\n            this.unlockRender();\r\n            this.setState({ mouseState: MouseState.PlacingWall });\r\n        })();\r\n    }\r\n\r\n    private setupStartingWalls(walls: Position[]): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= walls.length; i++) {\r\n                if (i === walls.length) {\r\n                    setTimeout(() => {\r\n                        resolve();\r\n                    }, 1000);\r\n                } else {\r\n                    let grid: Node[][] = this.state.grid;\r\n                    let position = walls[i];\r\n                    let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                    let className = ref.current.className;\r\n                    grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                    if (\r\n                        !className.includes('cell-start') &&\r\n                        !className.includes('cell-finish') &&\r\n                        !className.includes('cell-midpoint')\r\n                    ) {\r\n                        ref.current.className = 'cell cell-wall';\r\n                    }\r\n                    this.setState({ grid: grid });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private visualizeMaze(walls: Position[]): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= walls.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === walls.length) {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, UPDATE_RATE);\r\n                    } else {\r\n                        let grid: Node[][] = this.state.grid;\r\n                        let position: Position = walls[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (this.wallAlreadyPlaced(position)) {\r\n                            if (!className.includes('cell-start') && !className.includes('cell-finish')) {\r\n                                ref.current.className = 'cell cell-unvisited';\r\n                            }\r\n                            grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                        } else {\r\n                            if (\r\n                                !className.includes('cell-start') &&\r\n                                !className.includes('cell-finish') &&\r\n                                !className.includes('cell-midpoint')\r\n                            ) {\r\n                                ref.current.className = 'cell cell-wall';\r\n                            }\r\n                            grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                        }\r\n\r\n                        this.setState({ grid: grid });\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private wallAlreadyPlaced(wall: Position): boolean {\r\n        const grid = this.state.grid;\r\n        return grid[wall.y][wall.x].nodeType === NodeType.Wall;\r\n    }\r\n\r\n    setMidpoint(position: Position): void {\r\n        let prevAlgorithm = this.state.prevAlgorithm;\r\n        let grid = this.state.grid;\r\n        if (!this.isStart(position) && !this.isFinish(position)) {\r\n            let nextMidPoint: Position;\r\n            if (this.isMidpoint(position)) {\r\n                nextMidPoint = null;\r\n            } else {\r\n                nextMidPoint = position;\r\n            }\r\n            //\r\n            if (prevAlgorithm !== null) {\r\n                prevAlgorithm = null;\r\n                grid = this.clearPath();\r\n            }\r\n            //\r\n            this.setState({ grid: grid, prevAlgorithm: prevAlgorithm, midpointPos: nextMidPoint });\r\n        }\r\n    }\r\n\r\n    public render(): any {\r\n        const grid = this.state.grid;\r\n        return (\r\n            <div>\r\n                <Navbar\r\n                    performAlgorithm={(algorithm: PathfindingAlgorithm) => this.performAlgorithm(algorithm)}\r\n                    clearPath={() => this.setState({ prevAlgorithm: null, grid: this.clearPath() })}\r\n                    generateLandscape={() => this.generateLandscape()}\r\n                    generateMaze={(mazeGenerator: MazeGenerator) => this.generateMaze(mazeGenerator)}\r\n                />\r\n                <div className=\"grid\">\r\n                    {grid.map((row: Array<Node>, rowIdx) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIdx}>\r\n                                {row.map((cell: Node, colIdx) => {\r\n                                    let position: Position = { x: colIdx, y: rowIdx };\r\n                                    return (\r\n                                        <Cell\r\n                                            position={{ x: colIdx, y: rowIdx }}\r\n                                            isStart={this.isStart(position)}\r\n                                            isFinish={this.isFinish(position)}\r\n                                            isMidpoint={this.isMidpoint(position)}\r\n                                            nodeType={cell.nodeType}\r\n                                            weight={cell.weight}\r\n                                            updateMouseState={(position: Position, eventType: string) =>\r\n                                                this.updateMouseState(position, eventType)\r\n                                            }\r\n                                            setMidpoint={(position: Position) => this.setMidpoint(position)}\r\n                                            nodeRef={this.references[rowIdx][colIdx]}\r\n                                            key={colIdx}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Component, RefObject } from 'react';\r\nimport { NodeType, Position } from './IPathfinder';\r\n\r\ninterface Props {\r\n    position: Position;\r\n    isStart: boolean;\r\n    isFinish: boolean;\r\n    isMidpoint: boolean;\r\n    nodeType: NodeType;\r\n    weight: number;\r\n    updateMouseState: (position: Position, eventType: string) => void;\r\n    setMidpoint: (position: Position) => void;\r\n    nodeRef: (ref: RefObject<HTMLDivElement> | any) => void;\r\n}\r\n\r\nexport default class Cell extends Component<Props> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleMouseEvent(event: React.MouseEvent<HTMLElement>): void {\r\n        let position: Position = this.props.position;\r\n        if (event.nativeEvent.which === 1) {\r\n            let eventType: string = event.type;\r\n            this.props.updateMouseState(position, eventType);\r\n        } else if (event.nativeEvent.which === 3 && event.type === 'mousedown') {\r\n            this.props.setMidpoint(position);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param weight is a scale of difficulty of node traversal [0,1]\r\n     * @returns greyscale rgb value corresponding to the weight e.g.:\r\n     *          weight 0 produces 'rgb(255,255,255)'\r\n     *          weight 1 produces 'rgb(55,55,55)'\r\n     */\r\n    convertWeightToGreyscale(weight: number): string {\r\n        weight = 1 - weight;\r\n        const min = 55;\r\n        const max = 255;\r\n        const rbgVal = min + (max - min) * weight;\r\n        return `rgb(${rbgVal},${rbgVal},${rbgVal})`;\r\n    }\r\n\r\n    render(): any {\r\n        let { isStart, isFinish, isMidpoint, nodeType, weight } = this.props;\r\n        let className: string;\r\n        if (isStart || isFinish || isMidpoint) {\r\n            className = isStart ? 'cell-start' : isFinish ? 'cell-finish' : isMidpoint ? 'cell-midpoint' : '';\r\n        } else {\r\n            switch (nodeType) {\r\n                case NodeType.Unvisited:\r\n                    className = 'cell-unvisited';\r\n                    break;\r\n                case NodeType.VisitedOne:\r\n                    className = 'cell-visited-0';\r\n                    break;\r\n                case NodeType.VisitedTwo:\r\n                    className = 'cell-visited-1';\r\n                    break;\r\n                case NodeType.VisitedOverlap:\r\n                    className = 'cell-visited-overlap';\r\n                    break;\r\n                case NodeType.Wall:\r\n                    className = 'cell-wall';\r\n                    break;\r\n                case NodeType.ShortestPath:\r\n                    className = 'cell-shortestPath';\r\n                    break;\r\n            }\r\n        }\r\n        // TODO: Proper integration with visual perlin noise, w/o colour degradation with the regular pathfinding module\r\n        let backgroundColor = {};\r\n        if (nodeType !== NodeType.Wall && nodeType !== NodeType.ShortestPath && !isStart && !isFinish && weight > 0) {\r\n            backgroundColor = { backgroundColor: this.convertWeightToGreyscale(weight) };\r\n        }\r\n        return (\r\n            <div\r\n                ref={this.props.nodeRef}\r\n                id={`cell-${this.props.position.x}-${this.props.position.y}`}\r\n                className={`cell ${className}`}\r\n                style={{ ...backgroundColor }}\r\n                onMouseDown={(event) => this.handleMouseEvent(event)}\r\n                onMouseUp={(event) => this.handleMouseEvent(event)}\r\n                onMouseEnter={(event) => this.handleMouseEvent(event)}\r\n                onContextMenu={(event) => event.preventDefault()}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import { Component } from 'react';\r\nimport * as React from 'react';\r\nimport PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\nimport Dijkstra from './Algorithms/Dijkstra';\r\nimport DFS from './Algorithms/DFS';\r\nimport BFS from './Algorithms/BFS';\r\nimport MazeGenerator from './mazes/MazeGenerator';\r\nimport RecursiveDivision from './mazes/RecursiveDivision';\r\nimport RecursiveBacktracking from './mazes/RecursiveBacktracking';\r\nimport Ellers from './mazes/Ellers';\r\n\r\ninterface Props {\r\n    performAlgorithm: (algorithm: PathfindingAlgorithm) => void;\r\n    clearPath: () => void;\r\n    generateLandscape: () => void;\r\n    generateMaze: (mazeGenerator: MazeGenerator) => void;\r\n}\r\n\r\nexport default class Navbar extends Component<Props> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateMaze(new Ellers());\r\n                    }}\r\n                >\r\n                    Ellers\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateMaze(new RecursiveBacktracking());\r\n                    }}\r\n                >\r\n                    Recursive BackTrack\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateMaze(new RecursiveDivision());\r\n                    }}\r\n                >\r\n                    Recursive Division\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateLandscape();\r\n                    }}\r\n                >\r\n                    Generate Landscape\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new Dijkstra());\r\n                    }}\r\n                >\r\n                    Dijkstra\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new DFS());\r\n                    }}\r\n                >\r\n                    DFS\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new BFS());\r\n                    }}\r\n                >\r\n                    BFS\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.clearPath();\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import PathfindingAlgorithm, { PathData } from './PathfindingAlgorithm';\r\nimport { Node, Position } from '../IPathfinder';\r\nimport { PriorityQueue } from './DataStructures/PriorityQueue';\r\n\r\nexport default class Dijkstra extends PathfindingAlgorithm {\r\n    minHeap: PriorityQueue<Position> = new PriorityQueue<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.reset();\r\n        this.setMap(grid, startPos);\r\n        this.minHeap.insert(startPos, 0);\r\n        while (this.minHeap.size() !== 0) {\r\n            let closestPosition: Position = this.minHeap.pop();\r\n            this.markAsVisited(closestPosition);\r\n            if (this.equalPosition(closestPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, closestPosition);\r\n            let closestDistance: number = this.pathValues.get(this.hash(closestPosition)).shortestPath;\r\n            for (let neighbor of neighbors) {\r\n                let newDistance: number = closestDistance + this.getDistance(grid, closestPosition, neighbor);\r\n                let neighborPathData: PathData = this.pathValues.get(this.hash(neighbor));\r\n                this.minHeap.insert(neighbor, newDistance);\r\n                if (newDistance < neighborPathData.shortestPath) {\r\n                    let pathData: PathData = {\r\n                        shortestPath: newDistance,\r\n                        isVisited: true,\r\n                        previousNode: closestPosition,\r\n                    };\r\n                    this.pathValues.set(this.hash(neighbor), pathData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDistance(grid: Node[][], current: Position, neighbor: Position): number {\r\n        let weightDifference = grid[neighbor.y][neighbor.x].weight - grid[current.y][current.x].weight;\r\n        return (\r\n            Math.pow(10000, weightDifference) *\r\n            Math.sqrt(Math.pow(Math.abs(current.x - neighbor.x), 2) + Math.pow(Math.abs(current.y - neighbor.y), 2))\r\n        );\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>, startPos: Position): void {\r\n        grid.forEach((row) => {\r\n            return row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let shortestPath: number;\r\n                if (this.equalPosition(startPos, nodePosition)) {\r\n                    shortestPath = 0;\r\n                } else {\r\n                    shortestPath = Infinity;\r\n                }\r\n                let pathData: PathData = { shortestPath: shortestPath, isVisited: false, previousNode: null };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    findShortestPath(finishPos: Position): void {\r\n        for (\r\n            let curPosition = finishPos;\r\n            curPosition != null;\r\n            curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n\r\n    protected reset(): void {\r\n        this.clear();\r\n        this.minHeap = new PriorityQueue<Position>();\r\n    }\r\n}\r\n","export interface Node {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport type Tuple<T> = [T, number];\r\n\r\nexport class PriorityQueue<T extends Node> {\r\n    heap: Tuple<T>[] = [];\r\n\r\n    constructor() {}\r\n\r\n    insert(val: T, priority: number) {\r\n        if (!this.heap.length || this.heap[this.heap.length - 1][1] > priority) {\r\n            this.heap.push([val, priority]);\r\n            return this.heap;\r\n        }\r\n\r\n        const tmp: Tuple<T>[] = [];\r\n        let found = false;\r\n\r\n        for (let i = 0; i < this.heap.length; i++) {\r\n            const p = this.heap[i][1];\r\n\r\n            if (priority >= p && !found) {\r\n                tmp.push([val, priority]);\r\n                found = true;\r\n            }\r\n\r\n            tmp.push(this.heap[i]);\r\n        }\r\n\r\n        return (this.heap = tmp);\r\n    }\r\n\r\n    has({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return !!foundNode;\r\n    }\r\n\r\n    get({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return foundNode && foundNode[0];\r\n    }\r\n\r\n    shift(priority: boolean) {\r\n        const tuple = this.heap.shift();\r\n        if (priority) {\r\n            return tuple;\r\n        }\r\n\r\n        return tuple ? tuple[0] : undefined;\r\n    }\r\n\r\n    pop() {\r\n        return this.heap.pop()[0];\r\n    }\r\n\r\n    priorities() {\r\n        return this.heap.map(([_, p]) => p);\r\n    }\r\n\r\n    values() {\r\n        return this.heap.map(([val]) => val);\r\n    }\r\n\r\n    size() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    toArray(values: boolean) {\r\n        if (values) {\r\n            return this.heap.map(([val]) => val);\r\n        }\r\n        return this.heap;\r\n    }\r\n}\r\n","import PathfindingAlgorithm from './PathfindingAlgorithm';\r\nimport Stack from './DataStructures/Stack';\r\nimport { Position, Node } from '../IPathfinder';\r\n\r\nexport default class DFS extends PathfindingAlgorithm {\r\n    stack: Stack<Position> = new Stack<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.reset();\r\n        this.setMap(grid);\r\n        this.stack.push(startPos);\r\n        while (!this.stack.isEmpty()) {\r\n            let curPosition: Position = this.stack.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.finalPath = this.visitedNodesInOrder;\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition).reverse();\r\n            for (let neighbor of neighbors) {\r\n                this.stack.push(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                this.pathValues.set(this.hash(nodePosition), { isVisited: false });\r\n            });\r\n        });\r\n    }\r\n\r\n    protected reset(): void {\r\n        this.clear();\r\n        this.stack = new Stack<Position>();\r\n    }\r\n}\r\n","export default class Stack<T> {\r\n    data: Array<T>;\r\n    top: number;\r\n    constructor() {\r\n        this.data = new Array<T>();\r\n        this.top = 0;\r\n    }\r\n    public push(element: T): void {\r\n        this.data[this.top] = element;\r\n        this.top++;\r\n    }\r\n    public pop(): T {\r\n        this.top--;\r\n        return this.data[this.top];\r\n    }\r\n    public isEmpty(): boolean {\r\n        return this.top === 0;\r\n    }\r\n}\r\n","import PathfindingAlgorithm, { PathData } from './PathfindingAlgorithm';\r\nimport Queue from './DataStructures/Queue';\r\nimport { Node, Position } from '../IPathfinder';\r\n\r\nexport default class BFS extends PathfindingAlgorithm {\r\n    queue: Queue<Position> = new Queue<Position>();\r\n\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.reset();\r\n        this.setMap(grid);\r\n        this.queue.push(startPos);\r\n        while (!this.queue.isEmpty()) {\r\n            let curPosition: Position = this.queue.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition);\r\n            for (let neighbor of neighbors) {\r\n                this.queue.push(neighbor);\r\n                this.pathValues.set(this.hash(neighbor), { isVisited: true, previousNode: curPosition });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let pathData: PathData = {\r\n                    isVisited: false,\r\n                    previousNode: null,\r\n                };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    private findShortestPath(finishPos: Position) {\r\n        for (\r\n            let curPosition = finishPos;\r\n            curPosition != null;\r\n            curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n\r\n    protected reset(): void {\r\n        this.clear();\r\n        this.queue = new Queue<Position>();\r\n    }\r\n}\r\n","export default class Queue<T> {\r\n    data: Array<T> = [];\r\n    push(element: T) {\r\n        this.data.push(element);\r\n    }\r\n    pop(): T {\r\n        return this.data.shift();\r\n    }\r\n    isEmpty(): boolean {\r\n        return this.data.length === 0;\r\n    }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\n\r\nexport default class RecursiveDivision extends MazeGenerator {\r\n    public generateWalls(): Position[] {\r\n        this.wallsCreatedInOrder = [];\r\n        const ul: Position = { x: 0, y: 0 };\r\n        const lr: Position = { x: GRID_W - 1, y: GRID_H - 1 };\r\n        this.divide(ul, lr);\r\n        return this.wallsCreatedInOrder;\r\n    }\r\n\r\n    private divide(ul: Position, lr: Position) {\r\n        let width: number = lr.x - ul.x + 1;\r\n        let height: number = lr.y - ul.y + 1;\r\n        let vertical: boolean = width > height;\r\n        let splitIdx: number;\r\n        let gap: Position;\r\n        if (vertical) {\r\n            if (width < 4) return;\r\n            splitIdx = this.randomEven(ul.x, lr.x);\r\n            console.log(splitIdx);\r\n            gap = { x: splitIdx, y: this.randomOdd(ul.y, lr.y) };\r\n            console.log(`Trying ${splitIdx}, gap (${gap.x},${gap.y}) width: ${width} height: ${height}`);\r\n        } else {\r\n            if (height < 4) return;\r\n            splitIdx = this.randomEven(ul.y, lr.y);\r\n            console.log(splitIdx);\r\n            gap = { x: this.randomOdd(ul.x, lr.x), y: splitIdx };\r\n            console.log(`Trying ${splitIdx}, gap (${gap.x},${gap.y}) width: ${width} height: ${height}`);\r\n        }\r\n\r\n        for (let i = vertical ? ul.y + 1 : ul.x + 1; i <= (vertical ? lr.y - 1 : lr.x - 1); i++) {\r\n            if (i === (vertical ? gap.y : gap.x)) continue;\r\n            let pos: Position;\r\n            if (vertical) {\r\n                pos = { x: splitIdx, y: i };\r\n            } else {\r\n                pos = { x: i, y: splitIdx };\r\n            }\r\n            this.wallsCreatedInOrder.push(pos);\r\n        }\r\n\r\n        let newLr: Position;\r\n        let newUl: Position;\r\n        if (vertical) {\r\n            newLr = { x: splitIdx, y: lr.y };\r\n            newUl = { x: splitIdx, y: ul.y };\r\n        } else {\r\n            newLr = { x: lr.x, y: splitIdx };\r\n            newUl = { x: ul.x, y: splitIdx };\r\n        }\r\n\r\n        this.divide(ul, newLr);\r\n        this.divide(newUl, lr);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param min\r\n     * @param max\r\n     *\r\n     * produce a random even number in a range to match a valid wall coordinate that is not next to a current wall\r\n     */\r\n    private randomEven(min: number, max: number): number {\r\n        min += 2;\r\n        max -= 2;\r\n        if (min % 2 === 1) {\r\n            min++;\r\n        }\r\n        if (max % 2 === 1) {\r\n            max--;\r\n        }\r\n        let wall = min + 2 * this.getRandom(0, (max - min) / 2);\r\n        return wall;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param min\r\n     * @param max\r\n     *\r\n     * produce a random odd number in a range to match a valid gap coordinate\r\n     */\r\n    private randomOdd(min: number, max: number): number {\r\n        min += 2;\r\n        max -= 2;\r\n        if (min % 2 === 0) {\r\n            min++;\r\n        }\r\n        if (max % 2 === 0) {\r\n            max--;\r\n        }\r\n        let gap = min + 2 * this.getRandom(0, (max - min) / 2);\r\n        return gap;\r\n    }\r\n\r\n    private hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n}\r\n","import { Position, GRID_W, GRID_H } from '../IPathfinder';\r\nimport WallCarver from './wallCarver';\r\n\r\nexport default class RecursiveBacktracking extends WallCarver {\r\n    visited: Map<String, boolean>;\r\n    public generateWalls(): Position[] {\r\n        this.wallsCreatedInOrder = [];\r\n        this.visited = new Map<string, boolean>();\r\n        let randomStartingPos: Position = {\r\n            x: 2 * this.getRandom(1, (GRID_W - 1) / 2) - 1,\r\n            y: 2 * this.getRandom(1, (GRID_H - 1) / 2) - 1,\r\n        };\r\n        this.carveWalls(randomStartingPos);\r\n        return this.wallsCreatedInOrder;\r\n    }\r\n\r\n    carveWalls(current: Position): void {\r\n        this.visit(current);\r\n        let neighbors: Position[] = this.getUnvisitedNeighbors(current);\r\n        for (let neighbor of neighbors) {\r\n            console.log(neighbor);\r\n            if (!this.isVisisted(neighbor)) {\r\n                this.placeWallBetweenPositions(current, neighbor);\r\n                this.carveWalls(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getUnvisitedNeighbors(current: Position): Position[] {\r\n        let right: Position = { x: current.x + 2, y: current.y };\r\n        let up: Position = { x: current.x, y: current.y - 2 };\r\n        let left: Position = { x: current.x - 2, y: current.y };\r\n        let bot: Position = { x: current.x, y: current.y + 2 };\r\n        let neighbors: Position[] = [right, up, left, bot];\r\n        neighbors = neighbors.filter((pos: Position) => {\r\n            return this.positionInBounds(pos);\r\n        });\r\n        return this.randomisePositions(neighbors);\r\n    }\r\n\r\n    private randomisePositions(positions: Position[]): Position[] {\r\n        return positions.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    private visit(position: Position): void {\r\n        this.visited.set(this.hash(position), true);\r\n    }\r\n\r\n    private isVisisted(position: Position): boolean {\r\n        return this.visited.has(this.hash(position));\r\n    }\r\n\r\n    private hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\nimport WallCarver, { ADJUSTED_WIDTH, ADJUSTED_HEIGHT } from './wallCarver';\r\n\r\nexport default class Ellers extends WallCarver {\r\n    public generateWalls(): Position[] {\r\n        this.wallsCreatedInOrder = [];\r\n        this.generateMaze();\r\n        return this.wallsCreatedInOrder;\r\n    }\r\n\r\n    private generateMaze(): void {\r\n        let currentRow: Uptree = new Uptree();\r\n        currentRow = this.mergeRow(currentRow, 0, true);\r\n        for (let y = 1; y < ADJUSTED_HEIGHT; y++) {\r\n            let prevRow = currentRow;\r\n            currentRow = this.extendToNextRow(currentRow, prevRow, y);\r\n            currentRow = this.mergeRow(currentRow, y, y !== ADJUSTED_HEIGHT - 1);\r\n        }\r\n    }\r\n    extendToNextRow(currentRow: Uptree, prevRow: Uptree, rowIdx: number) {\r\n        currentRow = new Uptree();\r\n        for (let x = 0; x < ADJUSTED_WIDTH; x++) {\r\n            if (prevRow.isRoot(x)) {\r\n                currentRow.addEntry(x, -1);\r\n                this.addTopWall({ x: x, y: rowIdx });\r\n            } else if (this.randomBool()) {\r\n                currentRow.addEntry(x, prevRow.getEntry(x));\r\n                this.addTopWall({ x: x, y: rowIdx });\r\n            }\r\n        }\r\n        return currentRow;\r\n    }\r\n\r\n    private mergeRow(row: Uptree, rowIdx: number, random: boolean) {\r\n        for (let i = 0; i < ADJUSTED_WIDTH - 1; i++) {\r\n            if ((this.randomBool() || !random) && !row.sameClass(i, i + 1)) {\r\n                row.mergeSets(i, i + 1);\r\n                this.addRightWall({ x: i, y: rowIdx });\r\n            }\r\n        }\r\n        return row;\r\n    }\r\n    addRightWall(pos: Position): void {\r\n        this.addWall({ x: 2 * pos.x + 2, y: 2 * pos.y + 1 });\r\n    }\r\n\r\n    addTopWall(pos: Position): void {\r\n        this.addWall({ x: 2 * pos.x + 1, y: 2 * pos.y });\r\n    }\r\n\r\n    private randomBool(): boolean {\r\n        return Math.random() >= 0.5;\r\n    }\r\n}\r\n\r\nclass Uptree {\r\n    data: number[];\r\n    constructor() {\r\n        this.data = Array(ADJUSTED_WIDTH).fill(-1);\r\n    }\r\n\r\n    public mergeSets(set1: number, set2: number): void {\r\n        if (this.data[set1] === -1) {\r\n            this.data[set1] = this.getRoot(set2);\r\n        } else {\r\n            this.data[set2] = this.getRoot(set1);\r\n        }\r\n    }\r\n\r\n    public sameClass(index1: number, index2: number) {\r\n        return this.getRoot(index1) === this.getRoot(index2);\r\n    }\r\n\r\n    public getRoot(index: number): number {\r\n        while (this.data[index] !== -1) {\r\n            index = this.data[index];\r\n        }\r\n        return index;\r\n    }\r\n\r\n    public isRoot(index: number): boolean {\r\n        return this.data[index] === -1;\r\n    }\r\n\r\n    public addEntry(index: number, value: number) {\r\n        this.data[index] = value;\r\n    }\r\n\r\n    public getEntry(index: number): number {\r\n        return this.getRoot(index);\r\n    }\r\n}\r\n","// Credit to https://github.com/Bartvds/lorez/blob/master/src/extra/PerlinNoise.ts\r\n\r\nexport default class PerlinNoise {\r\n\r\n\tprivate p: number[];\r\n\tprivate permutation: number[];\r\n\r\n\tconstructor() {\r\n\t\t// To remove the need for index wrapping, double the permutation table length\r\n\t\tthis.permutation = [ 151, 160, 137, 91, 90, 15,\r\n\t\t\t131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\r\n\t\t\t190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\r\n\t\t\t88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\r\n\t\t\t77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\r\n\t\t\t102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\r\n\t\t\t135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\r\n\t\t\t5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\r\n\t\t\t223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\r\n\t\t\t129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\r\n\t\t\t251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\r\n\t\t\t49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n\t\t\t138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\r\n\t\t];\r\n\t\tthis.p = new Array(512);\r\n\r\n\t\tfor (var i = 0; i < 256; i++) {\r\n\t\t\tthis.p[256 + i] = this.p[i] = this.permutation[i];\r\n\t\t}\r\n\t}\r\n\r\n\tnoise(x: number, y: number, z: number): number {\r\n\t\tvar X = Math.floor(x) & 255;     // FIND UNIT CUBE THAT\r\n\t\tvar Y = Math.floor(y) & 255;     // CONTAINS POINT.\r\n\t\tvar Z = Math.floor(z) & 255;\r\n\r\n\t\tx -= Math.floor(x);              // FIND RELATIVE X,Y,Z\r\n\t\ty -= Math.floor(y);              // OF POINT IN CUBE.\r\n\t\tz -= Math.floor(z);\r\n\r\n\t\tvar u = this.fade(x);            // COMPUTE FADE CURVES\r\n\t\tvar v = this.fade(y);            // FOR EACH OF X,Y,Z.\r\n\t\tvar w = this.fade(z);\r\n\r\n\t\tvar A = this.p[X] + Y;\r\n\t\tvar AA = this.p[A] + Z;\r\n\t\tvar AB = this.p[A + 1] + Z;      // HASH COORDINATES OF\r\n\r\n\t\tvar B = this.p[X + 1] + Y;\r\n\t\tvar BA = this.p[B] + Z;\r\n\t\tvar BB = this.p[B + 1] + Z;      // THE 8 CUBE CORNERS,\r\n\r\n\t\treturn this.scale(this.lerp(w, this.lerp(v, this.lerp(u, this.grad(this.p[AA  ], x, y, z),  // AND ADD\r\n\t\t\t\t\tthis.grad(this.p[BA], x - 1, y, z)), // BLENDED\r\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB], x, y - 1, z),  // RESULTS\r\n\t\t\t\t\tthis.grad(this.p[BB], x - 1, y - 1, z))),// FROM  8\r\n\t\t\tthis.lerp(v, this.lerp(u, this.grad(this.p[AA + 1], x, y, z - 1),  // CORNERS\r\n\t\t\t\t\tthis.grad(this.p[BA + 1], x - 1, y, z - 1)), // OF CUBE\r\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB + 1], x, y - 1, z - 1),\r\n\t\t\t\t\tthis.grad(this.p[BB + 1], x - 1, y - 1, z - 1)))));\r\n\t}\r\n\r\n\tfade(t: number): number {\r\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\r\n\t}\r\n\r\n\tlerp(t: number, a: number, b: number): number {\r\n\t\treturn a + t * (b - a);\r\n\t}\r\n\r\n\tgrad(hash: number, x: number, y: number, z: number): number {\r\n\t\tvar h = hash & 15;      // CONVERT LO 4 BITS OF HASH CODE\r\n\t\tvar u = h < 8 ? x : y;  // INTO 12 GRADIENT DIRECTIONS.\r\n\t\tvar v = h < 4 ? y : h == 12 || h == 14 ? x : z;\r\n\t\treturn ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\r\n\t}\r\n\r\n\tscale(n: number): number {\r\n\t\treturn (1 + n) / 2;\r\n\t}\r\n}"],"sourceRoot":""}