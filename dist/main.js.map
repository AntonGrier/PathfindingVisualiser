{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/Pathfinder.tsx","webpack:///./src/Algorithms/PathfindingAlgorithm.tsx","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/App.tsx","webpack:///./src/Cell.tsx","webpack:///./src/Navbar.tsx","webpack:///./src/Algorithms/Dijkstra.tsx","webpack:///./src/Algorithms/DataStructures/PriorityQueue.tsx","webpack:///./src/Algorithms/DFS.ts","webpack:///./src/Algorithms/DataStructures/Stack.tsx","webpack:///./src/Algorithms/BFS.tsx","webpack:///./src/Algorithms/DataStructures/Queue.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GRIDW","GRIDH","DEFAULTSTARTPOS","x","Math","floor","y","DEFAULTFINISHPOS","MouseState","NodeType","Pathfinder","Component","props","super","this","state","grid","startPos","finishPos","mouseState","isMouseDown","row","curRow","col","newNode","position","nodeType","Unvisited","push","references","map","createRef","setState","PlacingWall","eventType","onMouseDown","onMouseUp","onMouseEnter","MovingStart","isFinish","MovingFinish","isStart","RemovingWall","Wall","algorithm","calculatePath","visitedInOrder","produceVisitedInOrder","shortestPath","produceFinalPath","visualiseAlgorithm","visualiseVisited","visualisePath","Promise","resolve","posIdx","setInterval","length","current","className","performAlgorithm","rowIdx","cell","colIdx","updateMouseState","nodeRef","pathValues","Map","finalPath","visitedNodesInOrder","neighbors","filter","pos","isVisited","hash","pathData","newPathData","set","pos1","pos2","toString","ReactDOM","render","document","getElementById","App","Cell","event","type","Visited","ShortestPath","ref","id","handleMouseEvent","onClick","Dijkstra","minHeap","PriorityQueue","setMap","insert","size","closestPosition","pop","console","log","markAsVisited","equalPosition","findShortestPath","getNeighbors","closestDistance","neighbor","newDistance","neighborPathData","previousNode","forEach","node","nodePosition","Infinity","curPosition","unshift","heap","val","priority","tmp","found","find","foundNode","tuple","shift","undefined","_","values","DFS","stack","isEmpty","data","top","element","BFS","queue"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = React;","import * as React from \"react\";\r\nimport {Component, createRef, RefObject} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport Navbar from \"./Navbar\";\r\nimport PathfindingAlgorithm from \"./Algorithms/PathfindingAlgorithm\";\r\n\r\nexport const GRIDW = 50;\r\nexport const GRIDH = 27;\r\nconst DEFAULTSTARTPOS: Position = {x: Math.floor(GRIDW/4), y: Math.floor(GRIDH/2)};\r\nconst DEFAULTFINISHPOS: Position = {x: GRIDW - DEFAULTSTARTPOS.x, y: DEFAULTSTARTPOS.y};\r\nconst UPDATERATE = 15;\r\n\r\nexport interface Position {\r\n    x: number,\r\n    y: number,\r\n}\r\nexport enum MouseState {\r\n    PlacingWall,\r\n    RemovingWall,\r\n    MovingStart,\r\n    MovingFinish,\r\n}\r\nexport enum NodeType {\r\n    Unvisited,\r\n    Visited,\r\n    Wall,\r\n    ShortestPath,\r\n}\r\nexport interface Node {\r\n    position : Position,\r\n    nodeType: NodeType;\r\n}\r\nexport default class Pathfinder extends Component<{}, {grid: Array<Array<Node>>, startPos: Position, finishPos: Position, mouseState: MouseState, isMouseDown: boolean}> {\r\n    references: Array<Array<RefObject<HTMLDivElement> | any>>;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            startPos: null,\r\n            finishPos: null,\r\n            mouseState: null,\r\n            isMouseDown: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let grid: Array<Array<Node>> = [];\r\n        for (let row = 0; row < GRIDH; row++) {\r\n            let curRow: Array<Node> = [];\r\n            for (let col = 0; col < GRIDW; col++) {\r\n                let newNode: Node = {position: {x: col, y: row}, nodeType: NodeType.Unvisited};\r\n                curRow.push(newNode);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.references = grid.map((row: Array<Node>) => {\r\n           return row.map(() => {\r\n               return createRef();\r\n           });\r\n        });\r\n        this.setState({grid: grid, startPos: DEFAULTSTARTPOS, finishPos: DEFAULTFINISHPOS, mouseState: MouseState.PlacingWall, isMouseDown: false});\r\n    }\r\n\r\n    updateMouseState(position: Position, eventType: string): void {\r\n        switch (eventType) {\r\n            case \"mousedown\": {\r\n                this.onMouseDown(position);\r\n                break;\r\n            }\r\n            case \"mouseup\": {\r\n                this.onMouseUp();\r\n                break;\r\n            }\r\n            case \"mouseenter\": {\r\n                this.onMouseEnter(position);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseDown(position: Position) {\r\n        let {grid, mouseState, isMouseDown} = this.state;\r\n        let nodeType: NodeType = grid[position.y][position.x].nodeType;\r\n        if ((mouseState === MouseState.MovingStart && this.isFinish(position)) || (mouseState === MouseState.MovingFinish && this.isStart(position))) return;\r\n\r\n        mouseState = this.isStart(position) ? MouseState.MovingStart : this.isFinish(position) ? MouseState.MovingFinish : nodeType === NodeType.Unvisited ? MouseState.PlacingWall : MouseState.RemovingWall;\r\n\r\n        if (!this.isStart(position) && !this.isFinish(position)) {\r\n            if (nodeType === NodeType.Wall) {\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n            } else {\r\n                grid[position.y][position.x].nodeType = NodeType.Wall\r\n            }\r\n        }\r\n        isMouseDown = true;\r\n        this.setState({grid: grid, mouseState: mouseState, isMouseDown: isMouseDown});\r\n    }\r\n\r\n    private onMouseUp() {\r\n        let mouseState = MouseState.PlacingWall;\r\n        let isMouseDown = false;\r\n        this.setState({mouseState: mouseState, isMouseDown: isMouseDown});\r\n    }\r\n\r\n    private onMouseEnter(position: Position) {\r\n        let {grid, startPos, finishPos, mouseState, isMouseDown} = this.state;\r\n        if (!isMouseDown || this.isStart(position) || this.isFinish(position)) return;\r\n\r\n        switch (mouseState) {\r\n            case MouseState.MovingStart:\r\n                startPos = position;\r\n                this.setState({startPos: startPos});\r\n                break;\r\n            case MouseState.MovingFinish:\r\n                finishPos = position;\r\n                this.setState({finishPos: finishPos});\r\n                break;\r\n            case MouseState.PlacingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                this.setState({grid: grid});\r\n                break;\r\n            case MouseState.RemovingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                this.setState({grid: grid});\r\n                break;\r\n        }\r\n    }\r\n\r\n    private isStart(position: Position) {\r\n        return position.x === this.state.startPos.x && position.y === this.state.startPos.y;\r\n    }\r\n\r\n    private isFinish(position: Position) {\r\n        return position.x === this.state.finishPos.x && position.y === this.state.finishPos.y;\r\n    }\r\n\r\n    private performAlgorithm(algorithm: PathfindingAlgorithm): void {\r\n        algorithm.calculatePath(this.state.grid, this.state.startPos, this.state.finishPos);\r\n        let visitedInOrder: Array<Position> = algorithm.produceVisitedInOrder();\r\n        let shortestPath: Array<Position> = algorithm.produceFinalPath();\r\n        this.visualiseAlgorithm(visitedInOrder, shortestPath);\r\n    }\r\n\r\n    private visualiseAlgorithm(visitedInOrder: Array<Position>, shortestPath: Array<Position>): void {\r\n        (async () => {\r\n            await this.visualiseVisited(visitedInOrder);\r\n            await this.visualisePath(shortestPath);\r\n        })();\r\n    }\r\n\r\n    private visualiseVisited(visitedInOrder: Array<Position>): Promise<void> {\r\n        return new Promise(resolve => {\r\n            let posIdx: number = 0;\r\n            setInterval(() => {\r\n                if (posIdx === visitedInOrder.length) {\r\n                    resolve();\r\n                } else {\r\n                    let position: Position = visitedInOrder[posIdx];\r\n                    let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                    ref.current.className = \"cell cell-visited\";\r\n                    posIdx++;\r\n                }\r\n            }, UPDATERATE * posIdx)\r\n        });\r\n    }\r\n\r\n    private visualisePath(shortestPath: Array<Position>): Promise<void> {\r\n        return new Promise(resolve => {\r\n            let posIdx: number = 0;\r\n            setInterval(() => {\r\n                if (posIdx === shortestPath.length) {\r\n                    resolve();\r\n                } else {\r\n                    let position: Position = shortestPath[posIdx];\r\n                    let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                    ref.current.className = \"cell cell-shortestPath\";\r\n                    posIdx++;\r\n                }\r\n            }, UPDATERATE * posIdx)\r\n        });\r\n    }\r\n\r\n    public render(): any {\r\n        let grid = this.state.grid;\r\n        return (\r\n            <div>\r\n            <Navbar performAlgorithm = {(algorithm: PathfindingAlgorithm) => this.performAlgorithm(algorithm)}/>\r\n            <div className = \"grid\">\r\n                {grid.map((row: Array<Node>, rowIdx) => {\r\n                    return (<div className=\"grid-row\" key = {rowIdx}>\r\n                        {row.map((cell: Node, colIdx) => {\r\n                            return (<Cell\r\n                                position = {{x: colIdx, y: rowIdx}}\r\n                                isStart={this.state.startPos.x === colIdx && this.state.startPos.y === rowIdx}\r\n                                isFinish={this.state.finishPos.x === colIdx && this.state.finishPos.y === rowIdx}\r\n                                nodeType = {cell.nodeType}\r\n                                updateMouseState = {(position: Position, eventType: string) => this.updateMouseState(position, eventType)}\r\n                                nodeRef = {this.references[rowIdx][colIdx]}\r\n                                key = {colIdx}/>)\r\n                        })}\r\n                    </div>)\r\n                })}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import {Node, NodeType, Position} from \"../Pathfinder\";\r\n\r\nexport interface PathData {\r\n    isVisited: boolean,\r\n    shortestPath?: number,\r\n    previousNode?: Position,\r\n}\r\n\r\nexport default abstract class PathfindingAlgorithm {\r\n    pathValues: Map<string, PathData> = new Map<string, PathData>();\r\n    finalPath: Array<Position> = [];\r\n    visitedNodesInOrder: Array<Position> = [];\r\n\r\n    protected abstract setMap(grid: Array<Array<Node>>, startPos?: Position): void;\r\n\r\n    public abstract calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    public produceVisitedInOrder(): Array<Position> {\r\n        return this.visitedNodesInOrder;\r\n    }\r\n\r\n    public produceFinalPath() : Array<Position> {\r\n        return this.finalPath;\r\n    }\r\n\r\n    protected getNeighbors(grid: Array<Array<Node>>, position: Position): Array<Position> {\r\n        let neighbors: Array<Position> = [];\r\n\r\n        if (position.x > 0) {\r\n            neighbors.push({x: position.x - 1, y: position.y});\r\n        }\r\n        if (position.y < grid.length - 1) {\r\n            neighbors.push({x: position.x, y: position.y + 1});\r\n        }\r\n        if (position.x < grid[0].length - 1) {\r\n            neighbors.push({x: position.x + 1, y: position.y});\r\n        }\r\n        if (position.y > 0) {\r\n            neighbors.push({x: position.x, y: position.y - 1});\r\n        }\r\n        return neighbors.filter((pos) => {\r\n            return (\r\n                grid[pos.y][pos.x].nodeType !== NodeType.Wall\r\n                && !this.isVisited(pos)\r\n            );\r\n        });\r\n    }\r\n\r\n    protected isVisited(position: Position): boolean {\r\n        return this.pathValues.get(this.hash(position)).isVisited;\r\n    }\r\n\r\n    protected markAsVisited(position: Position): void {\r\n        this.visitedNodesInOrder.push(position);\r\n        let pathData: PathData = this.pathValues.get(this.hash(position));\r\n        let newPathData: PathData =\r\n            {\r\n                ...pathData,\r\n                isVisited: true,\r\n            };\r\n        this.pathValues.set(this.hash(position), newPathData);\r\n    }\r\n\r\n    protected equalPosition(pos1: Position, pos2: Position) {\r\n        return pos1.x === pos2.x && pos1.y === pos2.y;\r\n    }\r\n\r\n    protected hash(position: Position): string {\r\n        return position.x.toString() + \"-\" + position.y.toString();\r\n    }\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById(\"root\")\r\n);","module.exports = ReactDOM;","import * as React from \"react\";\r\nimport Pathfinder from \"../Pathfinder\";\r\nimport {Component} from \"react\";\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (<div className=\"app\">\r\n            <Pathfinder/>\r\n        </div>);\r\n    }\r\n}","import * as React from \"react\";\r\nimport {Component, LegacyRef} from \"react\";\r\nimport {NodeType, Position} from \"./Pathfinder\";\r\nimport {RefObject} from \"react\";\r\n\r\nexport default class Cell extends Component<\r\n    {\r\n        position: Position,\r\n        isStart: boolean,\r\n        isFinish: boolean,\r\n        nodeType: NodeType,\r\n        updateMouseState: (position: Position, eventType: string) => void,\r\n        nodeRef: (ref: RefObject<HTMLDivElement> | any) => void,\r\n    },\r\n    {}>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleMouseEvent(event: React.MouseEvent<HTMLElement>): void {\r\n        let eventType: string =  event.type;\r\n        let position: Position = this.props.position;\r\n        this.props.updateMouseState(position, eventType);\r\n    }\r\n\r\n    render(): any {\r\n        let {isStart, isFinish, nodeType} = this.props;\r\n        let className: string;\r\n        if (isStart || isFinish) {\r\n            className = isStart ? \"cell-start\" : isFinish ? \"cell-finish\" : \"\";\r\n        } else {\r\n            switch (nodeType) {\r\n                case NodeType.Unvisited:    className = \"cell-unvisited\"; break;\r\n                case NodeType.Visited:      className = \"cell-visited\"; break;\r\n                case NodeType.Wall:         className = \"cell-wall\"; break;\r\n                case NodeType.ShortestPath: className = \"cell-shortestPath\"; break;\r\n            }\r\n        }\r\n        return (\r\n            <div ref={this.props.nodeRef} id={`cell-${this.props.position.x}-${this.props.position.y}`} className={`cell ${className}`}\r\n                 onMouseDown    =   {(event) => this.handleMouseEvent(event)}\r\n                 onMouseUp      =   {(event) => this.handleMouseEvent(event)}\r\n                 onMouseEnter   =   {(event) => this.handleMouseEvent(event)}\r\n            />\r\n        )\r\n    }\r\n}","import {Component} from \"react\";\r\nimport * as React from \"react\";\r\nimport {render} from \"react-dom\";\r\nimport PathfindingAlgorithm from \"./Algorithms/PathfindingAlgorithm\";\r\nimport Dijkstra from \"./Algorithms/Dijkstra\";\r\nimport DFS from \"./Algorithms/DFS\";\r\nimport BFS from \"./Algorithms/BFS\";\r\n\r\nexport default class extends Component<{performAlgorithm: (algorithm: PathfindingAlgorithm) => void},{}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <button onClick={() => {this.props.performAlgorithm(new Dijkstra())}}>Djikstra</button>\r\n                <button onClick={() => {this.props.performAlgorithm(new DFS())}}>DFS</button>\r\n                <button onClick={() => {this.props.performAlgorithm(new BFS())}}>BFS</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingAlgorithm, {PathData} from \"./PathfindingAlgorithm\";\r\nimport {Node, Position} from \"../Pathfinder\";\r\nimport {PriorityQueue} from \"./DataStructures/PriorityQueue\";\r\n\r\nexport default class Dijkstra extends PathfindingAlgorithm {\r\n    minHeap: PriorityQueue<Position> = new PriorityQueue<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid, startPos);\r\n        this.minHeap.insert(startPos, 0);\r\n        while (this.minHeap.size() !== 0) {\r\n            let closestPosition: Position = this.minHeap.pop();\r\n            console.log(closestPosition);\r\n            this.markAsVisited(closestPosition);\r\n            if (this.equalPosition(closestPosition, finishPos)) {\r\n                console.log(\"FINISH REACHED\");\r\n                this.findShortestPath(startPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, closestPosition);\r\n            let closestDistance: number = this.pathValues.get(this.hash(closestPosition)).shortestPath;\r\n            for (let neighbor of neighbors) {\r\n                let newDistance: number = closestDistance + 1;\r\n                let neighborPathData: PathData = this.pathValues.get(this.hash(neighbor));\r\n                this.minHeap.insert(neighbor, newDistance);\r\n                if (newDistance < neighborPathData.shortestPath) {\r\n                    let pathData: PathData = {\r\n                        shortestPath: newDistance,\r\n                        isVisited: true,\r\n                        previousNode: closestPosition\r\n                    };\r\n                    this.pathValues.set(this.hash(neighbor), pathData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>, startPos: Position): void {\r\n        grid.forEach((row) => {\r\n            return row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let shortestPath: number;\r\n                if (this.equalPosition(startPos, nodePosition)) {\r\n                    shortestPath = 0;\r\n                } else {\r\n                    shortestPath = Infinity;\r\n                }\r\n                let pathData: PathData = {shortestPath: shortestPath, isVisited: false, previousNode: null};\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    findShortestPath(finishPos: Position): void {\r\n        for (let curPosition = finishPos;\r\n             curPosition != null;\r\n             curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n}","export interface Node {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport type Tuple<T> = [T, number];\r\n\r\nexport class PriorityQueue<T extends Node> {\r\n    heap: Tuple<T>[] = [];\r\n\r\n    constructor() {}\r\n\r\n    insert(val: T, priority: number) {\r\n        if (!this.heap.length || this.heap[this.heap.length - 1][1] > priority) {\r\n            this.heap.push([val, priority]);\r\n            return this.heap;\r\n        }\r\n\r\n        const tmp: Tuple<T>[] = [];\r\n        let found = false;\r\n\r\n        for (let i = 0; i < this.heap.length; i++) {\r\n            const p = this.heap[i][1];\r\n\r\n            if (priority >= p && !found) {\r\n                tmp.push([val, priority]);\r\n                found = true;\r\n            }\r\n\r\n            tmp.push(this.heap[i]);\r\n        }\r\n\r\n        return (this.heap = tmp);\r\n    }\r\n\r\n    has({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return !!foundNode;\r\n    }\r\n\r\n    get({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return foundNode && foundNode[0];\r\n    }\r\n\r\n    shift(priority: boolean) {\r\n        const tuple = this.heap.shift();\r\n        if (priority) {\r\n            return tuple;\r\n        }\r\n\r\n        return tuple ? tuple[0] : undefined;\r\n    }\r\n\r\n    pop() {\r\n        return this.heap.pop()[0];\r\n    }\r\n\r\n    priorities() {\r\n        return this.heap.map(([_, p]) => p);\r\n    }\r\n\r\n    values() {\r\n        return this.heap.map(([val]) => val);\r\n    }\r\n\r\n    size() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    toArray(values: boolean) {\r\n        if (values) {\r\n            return this.heap.map(([val]) => val);\r\n        }\r\n        return this.heap;\r\n    }\r\n}","import PathfindingAlgorithm from \"./PathfindingAlgorithm\";\r\nimport Stack from \"./DataStructures/Stack\";\r\nimport {Position, Node} from \"../Pathfinder\";\r\n\r\nexport default class DFS extends PathfindingAlgorithm {\r\n    stack: Stack<Position> = new Stack<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid);\r\n        this.stack.push(startPos);\r\n        while (!this.stack.isEmpty()) {\r\n            let curPosition: Position = this.stack.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.finalPath = this.visitedNodesInOrder;\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition);\r\n            for (let neighbor of neighbors) {\r\n                this.stack.push(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                this.pathValues.set(this.hash(nodePosition), {isVisited: false});\r\n            });\r\n        });\r\n    }\r\n}","export default class Stack<T> {\r\n    data: Array<T> = [];\r\n    top: number = 0;\r\n    public push(element: T): void {\r\n        this.data[this.top] = element;\r\n        this.top++;\r\n    }\r\n    public pop(): T {\r\n        this.top--;\r\n        return this.data[this.top];\r\n    }\r\n    // public peek(): T {\r\n    //     return this.data[this.top - 1];\r\n    // }\r\n    public isEmpty(): boolean {\r\n        return this.top === 0;\r\n    }\r\n}","import PathfindingAlgorithm, {PathData} from \"./PathfindingAlgorithm\";\r\nimport Queue from \"./DataStructures/Queue\";\r\nimport {Node, Position} from \"../Pathfinder\";\r\n\r\nexport default class BFS extends PathfindingAlgorithm {\r\n    queue: Queue<Position> = new Queue<Position>();\r\n\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid);\r\n        this.queue.push(startPos);\r\n        while (!this.queue.isEmpty()) {\r\n            let curPosition: Position = this.queue.pop();\r\n            console.log(curPosition)\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition);\r\n            for (let neighbor of neighbors) {\r\n                this.queue.push(neighbor);\r\n                this.pathValues.set(this.hash(neighbor), {isVisited: true, previousNode: curPosition});\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let pathData: PathData = {\r\n                    isVisited: false,\r\n                    previousNode: null\r\n                };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    private findShortestPath(finishPos: Position) {\r\n        for (let curPosition = finishPos;\r\n             curPosition != null;\r\n             curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n}","export default class Queue<T> {\r\n    data: Array<T> = [];\r\n    push(element: T) {\r\n        this.data.push(element);\r\n    }\r\n    pop(): T {\r\n        return this.data.shift();\r\n    }\r\n    isEmpty(): boolean {\r\n        return this.data.length === 0;\r\n    }\r\n}"],"sourceRoot":""}