{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/Pathfinder.tsx","webpack:///./src/Algorithms/PathfindingAlgorithm.tsx","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/App.tsx","webpack:///./src/Cell.tsx","webpack:///./src/Navbar.tsx","webpack:///./src/Algorithms/Dijkstra.tsx","webpack:///./src/Algorithms/DataStructures/PriorityQueue.tsx","webpack:///./src/Algorithms/DFS.ts","webpack:///./src/Algorithms/DataStructures/Stack.tsx","webpack:///./src/Algorithms/BFS.tsx","webpack:///./src/Algorithms/DataStructures/Queue.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GRID_W","GRID_H","DEFAULT_START_POS","x","Math","floor","y","DEFAULT_FINISH_POS","MouseState","NodeType","Pathfinder","Component","props","super","this","state","grid","startPos","finishPos","mouseState","isMouseDown","updateLock","prevAlgorithm","row","curRow","col","newNode","position","nodeType","Unvisited","push","setState","PlacingWall","references","Array","fill","map","createRef","nextProps","nextState","nextContext","node","Wall","eventType","Disabled","onMouseDown","onMouseUp","onMouseEnter","MovingStart","isFinish","MovingFinish","isStart","RemovingWall","clearPath","recalculatePath","visitedInOrder","produceVisitedInOrder","finalPath","produceFinalPath","Visited","ShortestPath","algorithm","calculatePath","shortestPath","visualiseAlgorithm","lockRender","visualiseVisited","visualisePath","unlockRender","Promise","resolve","length","setTimeout","ref","className","current","includes","performAlgorithm","rowIdx","cell","colIdx","updateMouseState","nodeRef","pathValues","Map","visitedNodesInOrder","slice","neighbors","filter","neighbor","isVisited","cornerCheck","hash","pathData","newPathData","set","pos1","pos2","toString","ReactDOM","render","document","getElementById","App","Cell","event","type","id","handleMouseEvent","onClick","Dijkstra","minHeap","PriorityQueue","setMap","insert","size","closestPosition","pop","markAsVisited","equalPosition","findShortestPath","getNeighbors","closestDistance","newDistance","getDistance","neighborPathData","previousNode","clear","sqrt","pow","abs","forEach","nodePosition","Infinity","curPosition","unshift","heap","val","priority","tmp","found","find","foundNode","tuple","shift","undefined","_","values","DFS","stack","isEmpty","reverse","data","top","element","BFS","queue"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = React;","import * as React from \"react\";\r\nimport {Component, createRef, RefObject} from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport Navbar from \"./Navbar\";\r\nimport PathfindingAlgorithm from \"./Algorithms/PathfindingAlgorithm\";\r\n\r\nexport const GRID_W = 50;\r\nexport const GRID_H = 27;\r\nconst DEFAULT_START_POS: Position = {x: Math.floor(GRID_W/4), y: Math.floor(GRID_H/2)};\r\nconst DEFAULT_FINISH_POS: Position = {x: GRID_W - DEFAULT_START_POS.x, y: DEFAULT_START_POS.y};\r\nconst UPDATE_RATE = 5;\r\n\r\nexport interface Position {\r\n    x: number,\r\n    y: number,\r\n}\r\nexport enum MouseState {\r\n    PlacingWall,\r\n    RemovingWall,\r\n    MovingStart,\r\n    MovingFinish,\r\n    Disabled,\r\n}\r\nexport enum NodeType {\r\n    Unvisited,\r\n    Visited,\r\n    Wall,\r\n    ShortestPath,\r\n}\r\nexport interface Node {\r\n    position : Position,\r\n    nodeType: NodeType;\r\n}\r\n\r\nexport default class Pathfinder extends Component<{}, {grid: Array<Array<Node>>, startPos: Position, finishPos: Position, mouseState: MouseState, isMouseDown: boolean, updateLock: boolean, prevAlgorithm: PathfindingAlgorithm}> {\r\n    references: Array<Array<RefObject<HTMLDivElement> | any>>;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            startPos: null,\r\n            finishPos: null,\r\n            mouseState: null,\r\n            isMouseDown: false,\r\n            updateLock: false,\r\n            prevAlgorithm: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let grid: Array<Array<Node>> = [];\r\n        for (let row = 0; row < GRID_H; row++) {\r\n            let curRow: Array<Node> = [];\r\n            for (let col = 0; col < GRID_W; col++) {\r\n                let newNode: Node = {position: {x: col, y: row}, nodeType: NodeType.Unvisited};\r\n                curRow.push(newNode);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.setState({grid: grid, startPos: DEFAULT_START_POS, finishPos: DEFAULT_FINISH_POS, mouseState: MouseState.PlacingWall, isMouseDown: false});\r\n        this.references = Array(GRID_H).fill([]).map(() => Array(GRID_W).fill(0).map(() => createRef()));\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<{}>, nextState: Readonly<{ grid: Array<Array<Node>>; startPos: Position; finishPos: Position; mouseState: MouseState; isMouseDown: boolean; updateLock: boolean }>, nextContext: any): boolean {\r\n        return !nextState.updateLock;\r\n    }\r\n\r\n    clearPath(): Array<Array<Node>> {\r\n        let grid: Array<Array<Node>> = this.state.grid;\r\n        grid = grid.map((row) => {\r\n            return row.map((node) => {\r\n                return ({\r\n                    position: node.position,\r\n                    nodeType: node.nodeType === NodeType.Wall? NodeType.Wall : NodeType.Unvisited,\r\n                })\r\n            });\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    updateMouseState(position: Position, eventType: string): void {\r\n        if (this.state.mouseState === MouseState.Disabled) return;\r\n        switch (eventType) {\r\n            case \"mousedown\": {\r\n                this.onMouseDown(position);\r\n                break;\r\n            }\r\n            case \"mouseup\": {\r\n                this.onMouseUp();\r\n                break;\r\n            }\r\n            case \"mouseenter\": {\r\n                this.onMouseEnter(position);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseDown(position: Position) {\r\n        let {grid, mouseState, isMouseDown, prevAlgorithm} = this.state;\r\n        let nodeType: NodeType = grid[position.y][position.x].nodeType;\r\n        if ((mouseState === MouseState.MovingStart && this.isFinish(position)) || (mouseState === MouseState.MovingFinish && this.isStart(position))) return;\r\n\r\n        mouseState = this.isStart(position) ? MouseState.MovingStart : this.isFinish(position) ? MouseState.MovingFinish : nodeType === NodeType.Unvisited ? MouseState.PlacingWall : MouseState.RemovingWall;\r\n\r\n        if (!this.isStart(position) && !this.isFinish(position)) {\r\n            if (prevAlgorithm !== null) {\r\n                grid = this.clearPath();\r\n                prevAlgorithm = null;\r\n            }\r\n            if (nodeType === NodeType.Wall) {\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n            } else {\r\n                grid[position.y][position.x].nodeType = NodeType.Wall\r\n            }\r\n        }\r\n        isMouseDown = true;\r\n        this.setState({grid: grid, mouseState: mouseState, isMouseDown: isMouseDown, prevAlgorithm: prevAlgorithm});\r\n    }\r\n\r\n    private onMouseUp() {\r\n        let mouseState =  MouseState.PlacingWall;\r\n        let isMouseDown = false;\r\n        this.setState({mouseState: mouseState, isMouseDown: isMouseDown});\r\n    }\r\n\r\n    private onMouseEnter(position: Position) {\r\n        let {grid, startPos, finishPos, mouseState, isMouseDown, prevAlgorithm} = this.state;\r\n        if (!isMouseDown || this.isStart(position) || this.isFinish(position)) return;\r\n\r\n        switch (mouseState) {\r\n            case MouseState.MovingStart:\r\n                startPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({startPos: startPos});\r\n                }\r\n                break;\r\n            case MouseState.MovingFinish:\r\n                finishPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({finishPos: finishPos});\r\n                }\r\n                break;\r\n            case MouseState.PlacingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                this.setState({grid: grid});\r\n                break;\r\n            case MouseState.RemovingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                this.setState({grid: grid});\r\n                break;\r\n        }\r\n    }\r\n\r\n    private recalculatePath(startPos: Position, finishPos: Position, prevAlgorithm: PathfindingAlgorithm) {\r\n        let grid: Array<Array<Node>> = this.clearPath();\r\n        prevAlgorithm.recalculatePath(grid, startPos, finishPos);\r\n        let visitedInOrder = prevAlgorithm.produceVisitedInOrder();\r\n        let finalPath = prevAlgorithm.produceFinalPath();\r\n        for (let position of visitedInOrder) {\r\n            grid[position.y][position.x].nodeType = NodeType.Visited;\r\n        }\r\n        for (let position of finalPath) {\r\n            grid[position.y][position.x].nodeType = NodeType.ShortestPath;\r\n        }\r\n        this.setState({grid: grid, startPos: startPos, finishPos: finishPos});\r\n    }\r\n\r\n    private isStart(position: Position) {\r\n        return position.x === this.state.startPos.x && position.y === this.state.startPos.y;\r\n    }\r\n\r\n    private isFinish(position: Position) {\r\n        return position.x === this.state.finishPos.x && position.y === this.state.finishPos.y;\r\n    }\r\n\r\n    private performAlgorithm(algorithm: PathfindingAlgorithm): void {\r\n        this.setState({prevAlgorithm: algorithm, mouseState: MouseState.Disabled});\r\n        algorithm.calculatePath(this.state.grid, this.state.startPos, this.state.finishPos);\r\n        let visitedInOrder: Array<Position> = algorithm.produceVisitedInOrder();\r\n        let shortestPath: Array<Position> = algorithm.produceFinalPath();\r\n        this.visualiseAlgorithm(visitedInOrder, shortestPath);\r\n    }\r\n\r\n    private visualiseAlgorithm(visitedInOrder: Array<Position>, shortestPath: Array<Position>): void {\r\n        (async () => {\r\n            this.lockRender();\r\n            await this.visualiseVisited(visitedInOrder);\r\n            await this.visualisePath(shortestPath);\r\n            this.unlockRender();\r\n            this.setState({mouseState: MouseState.PlacingWall});\r\n        })();\r\n    }\r\n\r\n    private visualiseVisited(visitedInOrder: Array<Position>): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            for (let i = 0; i <= visitedInOrder.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === visitedInOrder.length) {\r\n                        resolve();\r\n                    } else {\r\n                        let position: Position = visitedInOrder[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (!className.includes(\"cell-start\") && !className.includes(\"cell-finish\")) {\r\n                            ref.current.className = \"cell cell-visited\";\r\n                            let grid: Array<Array<Node>> = this.state.grid;\r\n                            grid[position.y][position.x].nodeType = NodeType.Visited;\r\n                            this.setState({grid: grid});\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private visualisePath(shortestPath: Array<Position>): Promise<void> {\r\n        return new Promise<void>(resolve => {\r\n            for (let i = 0; i <= shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === shortestPath.length) {\r\n                        resolve();\r\n                    } else {\r\n                        let position: Position = shortestPath[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (!className.includes(\"cell-start\") && !className.includes(\"cell-finish\")) {\r\n                            ref.current.className = \"cell cell-shortestPath\";\r\n                            let grid: Array<Array<Node>> = this.state.grid;\r\n                            grid[position.y][position.x].nodeType = NodeType.ShortestPath;\r\n                            this.setState({grid: grid});\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private lockRender() {\r\n        this.setState({updateLock: true});\r\n    }\r\n\r\n    private unlockRender() {\r\n        this.setState({updateLock: false});\r\n    }\r\n\r\n    public render(): any {\r\n        let grid = this.state.grid;\r\n        return (\r\n            <div>\r\n            <Navbar performAlgorithm = {(algorithm: PathfindingAlgorithm) => this.performAlgorithm(algorithm)} clearPath={() => this.setState({prevAlgorithm: null, grid: this.clearPath()})}/>\r\n            <div className = \"grid\">\r\n                {grid.map((row: Array<Node>, rowIdx) => {\r\n                    return (<div className=\"grid-row\" key = {rowIdx}>\r\n                        {row.map((cell: Node, colIdx) => {\r\n                            return (<Cell\r\n                                position = {{x: colIdx, y: rowIdx}}\r\n                                isStart={this.state.startPos.x === colIdx && this.state.startPos.y === rowIdx}\r\n                                isFinish={this.state.finishPos.x === colIdx && this.state.finishPos.y === rowIdx}\r\n                                nodeType = {cell.nodeType}\r\n                                updateMouseState = {(position: Position, eventType: string) => this.updateMouseState(position, eventType)}\r\n                                nodeRef = {this.references[rowIdx][colIdx]}\r\n                                key = {colIdx}/>)\r\n                        })}\r\n                    </div>)\r\n                })}\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import {GRID_H, GRID_W, Node, NodeType, Position} from \"../Pathfinder\";\r\n\r\nexport interface PathData {\r\n    isVisited: boolean,\r\n    shortestPath?: number,\r\n    previousNode?: Position,\r\n}\r\n\r\nexport default abstract class PathfindingAlgorithm {\r\n    pathValues: Map<string, PathData> = new Map<string, PathData>();\r\n    finalPath: Array<Position> = [];\r\n    visitedNodesInOrder: Array<Position> = [];\r\n\r\n    protected abstract setMap(grid: Array<Array<Node>>, startPos?: Position): void;\r\n\r\n    public abstract calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    public abstract recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    public produceVisitedInOrder(): Array<Position> {\r\n        return this.visitedNodesInOrder.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    public produceFinalPath() : Array<Position> {\r\n        return this.finalPath.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    protected getNeighbors(grid: Array<Array<Node>>, position: Position): Array<Position> {\r\n        let neighbors: Array<Position> = [];\r\n        neighbors.push({x: position.x + 1, y: position.y});\r\n        neighbors.push({x: position.x, y: position.y + 1});\r\n        neighbors.push({x: position.x, y: position.y - 1});\r\n        neighbors.push({x: position.x - 1, y: position.y});\r\n\r\n        neighbors.push({x: position.x - 1, y: position.y + 1});\r\n        neighbors.push({x: position.x + 1, y: position.y + 1});\r\n        neighbors.push({x: position.x + 1, y: position.y - 1});\r\n        neighbors.push({x: position.x - 1, y: position.y - 1});\r\n\r\n        return neighbors.filter((neighbor) => {\r\n            return (\r\n                neighbor.x >= 0 && neighbor.x < GRID_W &&\r\n                neighbor.y >= 0 && neighbor.y < GRID_H &&\r\n                grid[neighbor.y][neighbor.x].nodeType !== NodeType.Wall &&\r\n                !this.isVisited(neighbor) && this.cornerCheck(position, neighbor, grid)\r\n            );\r\n        });\r\n    }\r\n\r\n    private cornerCheck(position: Position, neighbor: Position, grid: Array<Array<Node>>): boolean {\r\n        return grid[position.y][neighbor.x].nodeType !== NodeType.Wall || grid[neighbor.y][position.x].nodeType !== NodeType.Wall\r\n    }\r\n\r\n    protected isVisited(position: Position): boolean {\r\n        return this.pathValues.get(this.hash(position)).isVisited;\r\n    }\r\n\r\n    protected markAsVisited(position: Position): void {\r\n        this.visitedNodesInOrder.push(position);\r\n        let pathData: PathData = this.pathValues.get(this.hash(position));\r\n        let newPathData: PathData =\r\n            {\r\n                ...pathData,\r\n                isVisited: true,\r\n            };\r\n        this.pathValues.set(this.hash(position), newPathData);\r\n    }\r\n\r\n    protected equalPosition(pos1: Position, pos2: Position) {\r\n        return pos1.x === pos2.x && pos1.y === pos2.y;\r\n    }\r\n\r\n    protected hash(position: Position): string {\r\n        return position.x.toString() + \"-\" + position.y.toString();\r\n    }\r\n\r\n    protected clear(): void {\r\n        this.visitedNodesInOrder = [];\r\n        this.finalPath = [];\r\n        this.pathValues = new Map<string, PathData>();\r\n    }\r\n}","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById(\"root\")\r\n);","module.exports = ReactDOM;","import * as React from \"react\";\r\nimport Pathfinder from \"../Pathfinder\";\r\nimport {Component} from \"react\";\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (<div className=\"app\">\r\n            <Pathfinder/>\r\n        </div>);\r\n    }\r\n}","import * as React from \"react\";\r\nimport {Component, LegacyRef} from \"react\";\r\nimport {NodeType, Position} from \"./Pathfinder\";\r\nimport {RefObject} from \"react\";\r\n\r\nexport default class Cell extends Component<\r\n    {\r\n        position: Position,\r\n        isStart: boolean,\r\n        isFinish: boolean,\r\n        nodeType: NodeType,\r\n        updateMouseState: (position: Position, eventType: string) => void,\r\n        nodeRef: (ref: RefObject<HTMLDivElement> | any) => void,\r\n    },\r\n    {}>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleMouseEvent(event: React.MouseEvent<HTMLElement>): void {\r\n        let eventType: string =  event.type;\r\n        let position: Position = this.props.position;\r\n        this.props.updateMouseState(position, eventType);\r\n    }\r\n\r\n    render(): any {\r\n        let {isStart, isFinish, nodeType} = this.props;\r\n        let className: string;\r\n        if (isStart || isFinish) {\r\n            className = isStart ? \"cell-start\" : isFinish ? \"cell-finish\" : \"\";\r\n        } else {\r\n            switch (nodeType) {\r\n                case NodeType.Unvisited:    className = \"cell-unvisited\"; break;\r\n                case NodeType.Visited:      className = \"cell-visited\"; break;\r\n                case NodeType.Wall:         className = \"cell-wall\"; break;\r\n                case NodeType.ShortestPath: className = \"cell-shortestPath\"; break;\r\n            }\r\n        }\r\n        return (\r\n            <div ref={this.props.nodeRef} id={`cell-${this.props.position.x}-${this.props.position.y}`} className={`cell ${className}`}\r\n                 onMouseDown    =   {(event) => this.handleMouseEvent(event)}\r\n                 onMouseUp      =   {(event) => this.handleMouseEvent(event)}\r\n                 onMouseEnter   =   {(event) => this.handleMouseEvent(event)}\r\n            />\r\n        )\r\n    }\r\n}","import {Component} from \"react\";\r\nimport * as React from \"react\";\r\nimport PathfindingAlgorithm from \"./Algorithms/PathfindingAlgorithm\";\r\nimport Dijkstra from \"./Algorithms/Dijkstra\";\r\nimport DFS from \"./Algorithms/DFS\";\r\nimport BFS from \"./Algorithms/BFS\";\r\n\r\nexport default class extends Component<{performAlgorithm: (algorithm: PathfindingAlgorithm) => void, clearPath: () => void},{}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <button onClick={() => {this.props.performAlgorithm(new Dijkstra())}}>Dijkstra</button>\r\n                <button onClick={() => {this.props.performAlgorithm(new DFS())}}>DFS</button>\r\n                <button onClick={() => {this.props.performAlgorithm(new BFS())}}>BFS</button>\r\n                <button onClick={() => {this.props.clearPath()}}>Clear</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import PathfindingAlgorithm, {PathData} from \"./PathfindingAlgorithm\";\r\nimport {Node, Position} from \"../Pathfinder\";\r\nimport {PriorityQueue} from \"./DataStructures/PriorityQueue\";\r\n\r\nexport default class Dijkstra extends PathfindingAlgorithm {\r\n    minHeap: PriorityQueue<Position> = new PriorityQueue<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid, startPos);\r\n        this.minHeap.insert(startPos, 0);\r\n        while (this.minHeap.size() !== 0) {\r\n            let closestPosition: Position = this.minHeap.pop();\r\n            this.markAsVisited(closestPosition);\r\n            if (this.equalPosition(closestPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, closestPosition);\r\n            let closestDistance: number = this.pathValues.get(this.hash(closestPosition)).shortestPath;\r\n            for (let neighbor of neighbors) {\r\n                let newDistance: number = closestDistance + this.getDistance(closestPosition, neighbor);\r\n                let neighborPathData: PathData = this.pathValues.get(this.hash(neighbor));\r\n                this.minHeap.insert(neighbor, newDistance);\r\n                if (newDistance < neighborPathData.shortestPath) {\r\n                    let pathData: PathData = {\r\n                        shortestPath: newDistance,\r\n                        isVisited: true,\r\n                        previousNode: closestPosition\r\n                    };\r\n                    this.pathValues.set(this.hash(neighbor), pathData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public recalculatePath(grid: Node[][], startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.minHeap = new PriorityQueue<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n\r\n    private getDistance(pos1: Position, pos2: Position): number {\r\n        return Math.sqrt(Math.pow(Math.abs(pos1.x - pos2.x),2) + Math.pow(Math.abs(pos1.y - pos2.y),2))\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>, startPos: Position): void {\r\n        grid.forEach((row) => {\r\n            return row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let shortestPath: number;\r\n                if (this.equalPosition(startPos, nodePosition)) {\r\n                    shortestPath = 0;\r\n                } else {\r\n                    shortestPath = Infinity;\r\n                }\r\n                let pathData: PathData = {shortestPath: shortestPath, isVisited: false, previousNode: null};\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    findShortestPath(finishPos: Position): void {\r\n        for (let curPosition = finishPos;\r\n             curPosition != null;\r\n             curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n}","export interface Node {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport type Tuple<T> = [T, number];\r\n\r\nexport class PriorityQueue<T extends Node> {\r\n    heap: Tuple<T>[] = [];\r\n\r\n    constructor() {}\r\n\r\n    insert(val: T, priority: number) {\r\n        if (!this.heap.length || this.heap[this.heap.length - 1][1] > priority) {\r\n            this.heap.push([val, priority]);\r\n            return this.heap;\r\n        }\r\n\r\n        const tmp: Tuple<T>[] = [];\r\n        let found = false;\r\n\r\n        for (let i = 0; i < this.heap.length; i++) {\r\n            const p = this.heap[i][1];\r\n\r\n            if (priority >= p && !found) {\r\n                tmp.push([val, priority]);\r\n                found = true;\r\n            }\r\n\r\n            tmp.push(this.heap[i]);\r\n        }\r\n\r\n        return (this.heap = tmp);\r\n    }\r\n\r\n    has({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return !!foundNode;\r\n    }\r\n\r\n    get({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return foundNode && foundNode[0];\r\n    }\r\n\r\n    shift(priority: boolean) {\r\n        const tuple = this.heap.shift();\r\n        if (priority) {\r\n            return tuple;\r\n        }\r\n\r\n        return tuple ? tuple[0] : undefined;\r\n    }\r\n\r\n    pop() {\r\n        return this.heap.pop()[0];\r\n    }\r\n\r\n    priorities() {\r\n        return this.heap.map(([_, p]) => p);\r\n    }\r\n\r\n    values() {\r\n        return this.heap.map(([val]) => val);\r\n    }\r\n\r\n    size() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    toArray(values: boolean) {\r\n        if (values) {\r\n            return this.heap.map(([val]) => val);\r\n        }\r\n        return this.heap;\r\n    }\r\n}","import PathfindingAlgorithm from \"./PathfindingAlgorithm\";\r\nimport Stack from \"./DataStructures/Stack\";\r\nimport {Position, Node} from \"../Pathfinder\";\r\n\r\nexport default class DFS extends PathfindingAlgorithm {\r\n    stack: Stack<Position> = new Stack<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid);\r\n        this.stack.push(startPos);\r\n        while (!this.stack.isEmpty()) {\r\n            let curPosition: Position = this.stack.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.finalPath = this.visitedNodesInOrder;\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition).reverse();\r\n            for (let neighbor of neighbors) {\r\n                this.stack.push(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                this.pathValues.set(this.hash(nodePosition), {isVisited: false});\r\n            });\r\n        });\r\n    }\r\n\r\n    recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.stack = new Stack<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n}","export default class Stack<T> {\r\n    data: Array<T> = [];\r\n    top: number = 0;\r\n    public push(element: T): void {\r\n        this.data[this.top] = element;\r\n        this.top++;\r\n    }\r\n    public pop(): T {\r\n        this.top--;\r\n        return this.data[this.top];\r\n    }\r\n    // public peek(): T {\r\n    //     return this.data[this.top - 1];\r\n    // }\r\n    public isEmpty(): boolean {\r\n        return this.top === 0;\r\n    }\r\n}","import PathfindingAlgorithm, {PathData} from \"./PathfindingAlgorithm\";\r\nimport Queue from \"./DataStructures/Queue\";\r\nimport {Node, Position} from \"../Pathfinder\";\r\n\r\nexport default class BFS extends PathfindingAlgorithm {\r\n    queue: Queue<Position> = new Queue<Position>();\r\n\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid);\r\n        this.queue.push(startPos);\r\n        while (!this.queue.isEmpty()) {\r\n            let curPosition: Position = this.queue.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition);\r\n            for (let neighbor of neighbors) {\r\n                this.queue.push(neighbor);\r\n                this.pathValues.set(this.hash(neighbor), {isVisited: true, previousNode: curPosition});\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let pathData: PathData = {\r\n                    isVisited: false,\r\n                    previousNode: null\r\n                };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    private findShortestPath(finishPos: Position) {\r\n        for (let curPosition = finishPos;\r\n             curPosition != null;\r\n             curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n\r\n    recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.queue = new Queue<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n}","export default class Queue<T> {\r\n    data: Array<T> = [];\r\n    push(element: T) {\r\n        this.data.push(element);\r\n    }\r\n    pop(): T {\r\n        return this.data.shift();\r\n    }\r\n    isEmpty(): boolean {\r\n        return this.data.length === 0;\r\n    }\r\n}"],"sourceRoot":""}