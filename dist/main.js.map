{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/IPathfinder.tsx","webpack:///./src/Algorithms/PathfindingAlgorithm.tsx","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/App.tsx","webpack:///./src/Pathfinder.tsx","webpack:///./src/Cell.tsx","webpack:///./src/Navbar.tsx","webpack:///./src/Algorithms/Dijkstra.tsx","webpack:///./src/Algorithms/DataStructures/PriorityQueue.tsx","webpack:///./src/Algorithms/DFS.ts","webpack:///./src/Algorithms/DataStructures/Stack.tsx","webpack:///./src/Algorithms/BFS.tsx","webpack:///./src/Algorithms/DataStructures/Queue.ts","webpack:///./src/Algorithms/Perlin/PerlinNoise.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GRID_W","GRID_H","DEFAULT_START_POS","x","Math","floor","y","DEFAULT_FINISH_POS","UPDATE_RATE","MouseState","NodeType","pathValues","Map","finalPath","visitedNodesInOrder","this","slice","length","grid","position","neighbors","push","filter","neighbor","nodeType","Wall","isVisited","cornerCheck","hash","pathData","newPathData","set","pos1","pos2","toString","ReactDOM","render","document","getElementById","App","Component","props","super","state","className","Pathfinder","references","Array","fill","map","createRef","row","curRow","col","newNode","Unvisited","weight","startPos","finishPos","mouseState","PlacingWall","isMouseDown","updateLock","prevAlgorithm","nextProps","nextState","node","eventType","Disabled","onMouseDown","onMouseUp","onMouseEnter","MovingStart","isFinish","MovingFinish","isStart","RemovingWall","clearPath","setState","recalculatePath","visitedInOrder","produceVisitedInOrder","produceFinalPath","Visited","ShortestPath","algorithm","calculatePath","shortestPath","visualiseAlgorithm","lockRender","visualiseVisited","visualisePath","unlockRender","Promise","resolve","setTimeout","ref","current","includes","perlin","seed","random","newWeight","noise","console","log","performAlgorithm","generateLandscape","rowIdx","cell","colIdx","updateMouseState","nodeRef","Cell","event","type","rbgVal","backgroundColor","colour","convertWeightToGreyscale","id","style","handleMouseEvent","Navbar","onClick","Dijkstra","minHeap","PriorityQueue","setMap","insert","size","closestPosition","pop","markAsVisited","equalPosition","findShortestPath","getNeighbors","closestDistance","newDistance","getDistance","neighborPathData","previousNode","clear","weightDifference","pow","sqrt","abs","forEach","nodePosition","Infinity","curPosition","unshift","heap","val","priority","tmp","found","find","foundNode","tuple","shift","undefined","_","values","DFS","stack","isEmpty","reverse","data","top","element","BFS","queue","permutation","z","X","Y","Z","u","fade","v","w","A","AA","AB","B","BA","BB","scale","lerp","grad","a","b","h"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = React;","import PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\n\r\nexport const GRID_W = 50;\r\nexport const GRID_H = 25;\r\nexport const DEFAULT_START_POS: Position = { x: Math.floor(GRID_W / 4), y: Math.floor(GRID_H / 2) };\r\nexport const DEFAULT_FINISH_POS: Position = { x: GRID_W - DEFAULT_START_POS.x, y: DEFAULT_START_POS.y };\r\nexport const UPDATE_RATE = 5;\r\n\r\nexport interface Position {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport enum MouseState {\r\n    PlacingWall,\r\n    RemovingWall,\r\n    MovingStart,\r\n    MovingFinish,\r\n    Disabled,\r\n}\r\nexport enum NodeType {\r\n    Unvisited,\r\n    Visited,\r\n    Wall,\r\n    ShortestPath,\r\n}\r\nexport interface Node {\r\n    position: Position;\r\n    nodeType: NodeType;\r\n    weight: number; //\r\n}\r\n","import { GRID_H, GRID_W, Node, NodeType, Position } from '../IPathfinder';\r\n\r\nexport interface PathData {\r\n    isVisited: boolean;\r\n    shortestPath?: number;\r\n    previousNode?: Position;\r\n}\r\n\r\nexport default abstract class PathfindingAlgorithm {\r\n    pathValues: Map<string, PathData> = new Map<string, PathData>();\r\n    finalPath: Array<Position> = [];\r\n    visitedNodesInOrder: Array<Position> = [];\r\n\r\n    protected abstract setMap(grid: Array<Array<Node>>, startPos?: Position): void;\r\n\r\n    public abstract calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    public abstract recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    public produceVisitedInOrder(): Array<Position> {\r\n        return this.visitedNodesInOrder.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    public produceFinalPath(): Array<Position> {\r\n        return this.finalPath.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    protected getNeighbors(grid: Array<Array<Node>>, position: Position): Array<Position> {\r\n        let neighbors: Array<Position> = [];\r\n        neighbors.push({ x: position.x + 1, y: position.y });\r\n        neighbors.push({ x: position.x, y: position.y + 1 });\r\n        neighbors.push({ x: position.x, y: position.y - 1 });\r\n        neighbors.push({ x: position.x - 1, y: position.y });\r\n\r\n        neighbors.push({ x: position.x - 1, y: position.y + 1 });\r\n        neighbors.push({ x: position.x + 1, y: position.y + 1 });\r\n        neighbors.push({ x: position.x + 1, y: position.y - 1 });\r\n        neighbors.push({ x: position.x - 1, y: position.y - 1 });\r\n\r\n        return neighbors.filter((neighbor) => {\r\n            return (\r\n                neighbor.x >= 0 &&\r\n                neighbor.x < GRID_W &&\r\n                neighbor.y >= 0 &&\r\n                neighbor.y < GRID_H &&\r\n                grid[neighbor.y][neighbor.x].nodeType !== NodeType.Wall &&\r\n                !this.isVisited(neighbor) &&\r\n                this.cornerCheck(position, neighbor, grid)\r\n            );\r\n        });\r\n    }\r\n\r\n    private cornerCheck(position: Position, neighbor: Position, grid: Array<Array<Node>>): boolean {\r\n        return (\r\n            grid[position.y][neighbor.x].nodeType !== NodeType.Wall ||\r\n            grid[neighbor.y][position.x].nodeType !== NodeType.Wall\r\n        );\r\n    }\r\n\r\n    protected isVisited(position: Position): boolean {\r\n        return this.pathValues.get(this.hash(position)).isVisited;\r\n    }\r\n\r\n    protected markAsVisited(position: Position): void {\r\n        this.visitedNodesInOrder.push(position);\r\n        let pathData: PathData = this.pathValues.get(this.hash(position));\r\n        let newPathData: PathData = {\r\n            ...pathData,\r\n            isVisited: true,\r\n        };\r\n        this.pathValues.set(this.hash(position), newPathData);\r\n    }\r\n\r\n    protected equalPosition(pos1: Position, pos2: Position) {\r\n        return pos1.x === pos2.x && pos1.y === pos2.y;\r\n    }\r\n\r\n    protected hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n\r\n    protected clear(): void {\r\n        this.visitedNodesInOrder = [];\r\n        this.finalPath = [];\r\n        this.pathValues = new Map<string, PathData>();\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","module.exports = ReactDOM;","import * as React from 'react';\r\nimport Pathfinder from '../Pathfinder';\r\nimport { Component } from 'react';\r\n\r\nexport default class App extends Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"app\">\r\n                <Pathfinder />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n    Node,\r\n    NodeType,\r\n    Position,\r\n    MouseState,\r\n    GRID_W,\r\n    GRID_H,\r\n    DEFAULT_START_POS,\r\n    DEFAULT_FINISH_POS,\r\n    UPDATE_RATE,\r\n} from './IPathfinder';\r\nimport { Component, createRef, RefObject } from 'react';\r\nimport Cell from './Cell';\r\nimport Navbar from './Navbar';\r\nimport PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\nimport PerlinNoise from './Algorithms/Perlin/PerlinNoise';\r\n\r\ninterface State {\r\n    grid: Node[][];\r\n    startPos: Position;\r\n    finishPos: Position;\r\n    mouseState: MouseState;\r\n    isMouseDown: boolean;\r\n    updateLock: boolean;\r\n    prevAlgorithm: PathfindingAlgorithm;\r\n}\r\n\r\nexport default class Pathfinder extends Component<{}, State> {\r\n    references: Array<Array<RefObject<HTMLDivElement> | any>> = Array(GRID_H)\r\n        .fill([])\r\n        .map(() =>\r\n            Array(GRID_W)\r\n                .fill(0)\r\n                .map(() => createRef()),\r\n        );\r\n    constructor(props: any) {\r\n        super(props);\r\n        // this.references = Array(GRID_H)\r\n        //     .fill([])\r\n        //     .map(() =>\r\n        //         Array(GRID_W)\r\n        //             .fill(0)\r\n        //             .map(() => createRef()),\r\n        //     );\r\n        let grid: Node[][] = [];\r\n        for (let row = 0; row < GRID_H; row++) {\r\n            let curRow: Array<Node> = [];\r\n            for (let col = 0; col < GRID_W; col++) {\r\n                let newNode: Node = { position: { x: col, y: row }, nodeType: NodeType.Unvisited, weight: 0 };\r\n                curRow.push(newNode);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.state = {\r\n            grid: grid,\r\n            startPos: DEFAULT_START_POS,\r\n            finishPos: DEFAULT_FINISH_POS,\r\n            mouseState: MouseState.PlacingWall,\r\n            isMouseDown: false,\r\n            updateLock: false,\r\n            prevAlgorithm: null,\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(\r\n        nextProps: Readonly<{}>,\r\n        nextState: Readonly<{\r\n            grid: Node[][];\r\n            startPos: Position;\r\n            finishPos: Position;\r\n            mouseState: MouseState;\r\n            isMouseDown: boolean;\r\n            updateLock: boolean;\r\n        }>,\r\n    ): boolean {\r\n        return !nextState.updateLock;\r\n    }\r\n\r\n    clearPath(): Node[][] {\r\n        let grid: Node[][] = this.state.grid;\r\n        grid = grid.map((row) => {\r\n            return row.map((node) => {\r\n                return {\r\n                    ...node,\r\n                    nodeType: node.nodeType === NodeType.Wall ? NodeType.Wall : NodeType.Unvisited,\r\n                };\r\n            });\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    updateMouseState(position: Position, eventType: string): void {\r\n        if (this.state.mouseState === MouseState.Disabled) return;\r\n        switch (eventType) {\r\n            case 'mousedown': {\r\n                this.onMouseDown(position);\r\n                break;\r\n            }\r\n            case 'mouseup': {\r\n                this.onMouseUp();\r\n                break;\r\n            }\r\n            case 'mouseenter': {\r\n                this.onMouseEnter(position);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseDown(position: Position) {\r\n        let { grid, mouseState, isMouseDown, prevAlgorithm } = this.state;\r\n        let nodeType: NodeType = grid[position.y][position.x].nodeType;\r\n        if (\r\n            (mouseState === MouseState.MovingStart && this.isFinish(position)) ||\r\n            (mouseState === MouseState.MovingFinish && this.isStart(position))\r\n        )\r\n            return;\r\n\r\n        mouseState = this.isStart(position)\r\n            ? MouseState.MovingStart\r\n            : this.isFinish(position)\r\n            ? MouseState.MovingFinish\r\n            : nodeType === NodeType.Unvisited\r\n            ? MouseState.PlacingWall\r\n            : MouseState.RemovingWall;\r\n\r\n        if (!this.isStart(position) && !this.isFinish(position)) {\r\n            if (prevAlgorithm !== null) {\r\n                grid = this.clearPath();\r\n                prevAlgorithm = null;\r\n            }\r\n            if (nodeType === NodeType.Wall) {\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n            } else {\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n            }\r\n        }\r\n        isMouseDown = true;\r\n        this.setState({ grid: grid, mouseState: mouseState, isMouseDown: isMouseDown, prevAlgorithm: prevAlgorithm });\r\n    }\r\n\r\n    private onMouseUp() {\r\n        let mouseState = MouseState.PlacingWall;\r\n        let isMouseDown = false;\r\n        this.setState({ mouseState: mouseState, isMouseDown: isMouseDown });\r\n    }\r\n\r\n    private onMouseEnter(position: Position) {\r\n        let { grid, startPos, finishPos, mouseState, isMouseDown, prevAlgorithm } = this.state;\r\n        if (!isMouseDown || this.isStart(position) || this.isFinish(position)) return;\r\n\r\n        switch (mouseState) {\r\n            case MouseState.MovingStart:\r\n                startPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ startPos: startPos });\r\n                }\r\n                break;\r\n            case MouseState.MovingFinish:\r\n                finishPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ finishPos: finishPos });\r\n                }\r\n                break;\r\n            case MouseState.PlacingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                this.setState({ grid: grid });\r\n                break;\r\n            case MouseState.RemovingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                this.setState({ grid: grid });\r\n                break;\r\n        }\r\n    }\r\n\r\n    private recalculatePath(startPos: Position, finishPos: Position, prevAlgorithm: PathfindingAlgorithm) {\r\n        let grid: Node[][] = this.clearPath();\r\n        prevAlgorithm.recalculatePath(grid, startPos, finishPos);\r\n        let visitedInOrder = prevAlgorithm.produceVisitedInOrder();\r\n        let finalPath = prevAlgorithm.produceFinalPath();\r\n        for (let position of visitedInOrder) {\r\n            grid[position.y][position.x].nodeType = NodeType.Visited;\r\n        }\r\n        for (let position of finalPath) {\r\n            grid[position.y][position.x].nodeType = NodeType.ShortestPath;\r\n        }\r\n        this.setState({ grid: grid, startPos: startPos, finishPos: finishPos });\r\n    }\r\n\r\n    private isStart(position: Position) {\r\n        return position.x === this.state.startPos.x && position.y === this.state.startPos.y;\r\n    }\r\n\r\n    private isFinish(position: Position) {\r\n        return position.x === this.state.finishPos.x && position.y === this.state.finishPos.y;\r\n    }\r\n\r\n    private performAlgorithm(algorithm: PathfindingAlgorithm): void {\r\n        this.setState({ prevAlgorithm: algorithm, mouseState: MouseState.Disabled });\r\n        algorithm.calculatePath(this.state.grid, this.state.startPos, this.state.finishPos);\r\n        let visitedInOrder: Array<Position> = algorithm.produceVisitedInOrder();\r\n        let shortestPath: Array<Position> = algorithm.produceFinalPath();\r\n        this.visualiseAlgorithm(visitedInOrder, shortestPath);\r\n    }\r\n\r\n    private visualiseAlgorithm(visitedInOrder: Array<Position>, shortestPath: Array<Position>): void {\r\n        (async () => {\r\n            this.lockRender();\r\n            await this.visualiseVisited(visitedInOrder);\r\n            await this.visualisePath(shortestPath);\r\n            this.unlockRender();\r\n            this.setState({ mouseState: MouseState.PlacingWall });\r\n        })();\r\n    }\r\n\r\n    private visualiseVisited(visitedInOrder: Array<Position>): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= visitedInOrder.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === visitedInOrder.length) {\r\n                        resolve();\r\n                    } else {\r\n                        let position: Position = visitedInOrder[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (!className.includes('cell-start') && !className.includes('cell-finish')) {\r\n                            ref.current.className = 'cell cell-visited';\r\n                            let grid: Node[][] = this.state.grid;\r\n                            grid[position.y][position.x].nodeType = NodeType.Visited;\r\n                            this.setState({ grid: grid });\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private visualisePath(shortestPath: Array<Position>): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === shortestPath.length) {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, UPDATE_RATE);\r\n                    } else {\r\n                        let position: Position = shortestPath[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (!className.includes('cell-start') && !className.includes('cell-finish')) {\r\n                            ref.current.className = 'cell cell-shortestPath';\r\n                            let grid: Node[][] = this.state.grid;\r\n                            grid[position.y][position.x].nodeType = NodeType.ShortestPath;\r\n                            this.setState({ grid: grid });\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private lockRender() {\r\n        this.setState({ updateLock: true });\r\n    }\r\n\r\n    private unlockRender() {\r\n        this.setState({ updateLock: false });\r\n    }\r\n\r\n    private generateLandscape() {\r\n        const STEEPNESS: number = 0.2;\r\n        const perlin: PerlinNoise = new PerlinNoise();\r\n        const seed: number = Math.floor(Math.random() * 10000);\r\n\r\n        let grid: Node[][] = this.state.grid;\r\n        for (let y: number = 0; y < GRID_H; y++) {\r\n            for (let x: number = 0; x < GRID_W; x++) {\r\n                let newWeight = perlin.noise(x * STEEPNESS + seed, y * STEEPNESS + seed, 0);\r\n                grid[y][x].weight = newWeight;\r\n            }\r\n        }\r\n        console.log(grid);\r\n        this.setState({ grid: grid });\r\n    }\r\n\r\n    public render(): any {\r\n        let grid = this.state.grid;\r\n        return (\r\n            <div>\r\n                <Navbar\r\n                    performAlgorithm={(algorithm: PathfindingAlgorithm) => this.performAlgorithm(algorithm)}\r\n                    clearPath={() => this.setState({ prevAlgorithm: null, grid: this.clearPath() })}\r\n                    generateLandscape={() => this.generateLandscape()}\r\n                />\r\n                <div className=\"grid\">\r\n                    {grid.map((row: Array<Node>, rowIdx) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIdx}>\r\n                                {row.map((cell: Node, colIdx) => {\r\n                                    return (\r\n                                        <Cell\r\n                                            position={{ x: colIdx, y: rowIdx }}\r\n                                            isStart={\r\n                                                this.state.startPos.x === colIdx && this.state.startPos.y === rowIdx\r\n                                            }\r\n                                            isFinish={\r\n                                                this.state.finishPos.x === colIdx && this.state.finishPos.y === rowIdx\r\n                                            }\r\n                                            nodeType={cell.nodeType}\r\n                                            weight={cell.weight}\r\n                                            updateMouseState={(position: Position, eventType: string) =>\r\n                                                this.updateMouseState(position, eventType)\r\n                                            }\r\n                                            nodeRef={this.references[rowIdx][colIdx]}\r\n                                            key={colIdx}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Component, RefObject } from 'react';\r\nimport { NodeType, Position } from './IPathfinder';\r\n\r\ninterface Props {\r\n    position: Position;\r\n    isStart: boolean;\r\n    isFinish: boolean;\r\n    nodeType: NodeType;\r\n    weight: number;\r\n    updateMouseState: (position: Position, eventType: string) => void;\r\n    nodeRef: (ref: RefObject<HTMLDivElement> | any) => void;\r\n}\r\n\r\nexport default class Cell extends Component<Props> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleMouseEvent(event: React.MouseEvent<HTMLElement>): void {\r\n        let eventType: string = event.type;\r\n        let position: Position = this.props.position;\r\n        this.props.updateMouseState(position, eventType);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param weight is a scale of difficulty of node traversal [0,1]\r\n     * @returns greyscale rgb value corresponding to the weight e.g.:\r\n     *          weight 0 produces 'rgb(255,255,255)'\r\n     *          weight 1 produces 'rgb(55,55,55)'\r\n     */\r\n    convertWeightToGreyscale(weight: number): string {\r\n        weight = 1 - weight;\r\n        const min = 55;\r\n        const max = 255;\r\n        const rbgVal = min + (max - min) * weight;\r\n        return `rgb(${rbgVal},${rbgVal},${rbgVal})`;\r\n    }\r\n\r\n    render(): any {\r\n        let { isStart, isFinish, nodeType, weight } = this.props;\r\n        let className: string;\r\n        if (isStart || isFinish) {\r\n            className = isStart ? 'cell-start' : isFinish ? 'cell-finish' : '';\r\n        } else {\r\n            switch (nodeType) {\r\n                case NodeType.Unvisited:\r\n                    className = 'cell-unvisited';\r\n                    break;\r\n                case NodeType.Visited:\r\n                    className = 'cell-visited';\r\n                    break;\r\n                case NodeType.Wall:\r\n                    className = 'cell-wall';\r\n                    break;\r\n                case NodeType.ShortestPath:\r\n                    className = 'cell-shortestPath';\r\n                    break;\r\n            }\r\n        }\r\n        let backgroundColor = {};\r\n        if (nodeType === NodeType.Unvisited) {\r\n            let colour: string;\r\n            if (weight > 0) {\r\n                colour = this.convertWeightToGreyscale(weight);\r\n            } else {\r\n                colour = 'white';\r\n            }\r\n            backgroundColor = { backgroundColor: colour };\r\n        }\r\n        return (\r\n            <div\r\n                ref={this.props.nodeRef}\r\n                id={`cell-${this.props.position.x}-${this.props.position.y}`}\r\n                style={{ ...backgroundColor }}\r\n                className={`cell ${className}`}\r\n                onMouseDown={(event) => this.handleMouseEvent(event)}\r\n                onMouseUp={(event) => this.handleMouseEvent(event)}\r\n                onMouseEnter={(event) => this.handleMouseEvent(event)}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import { Component } from 'react';\r\nimport * as React from 'react';\r\nimport PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\nimport Dijkstra from './Algorithms/Dijkstra';\r\nimport DFS from './Algorithms/DFS';\r\nimport BFS from './Algorithms/BFS';\r\n\r\ninterface Props {\r\n    performAlgorithm: (algorithm: PathfindingAlgorithm) => void;\r\n    clearPath: () => void;\r\n    generateLandscape: () => void;\r\n}\r\n\r\nexport default class Navbar extends Component<Props> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateLandscape();\r\n                    }}\r\n                >\r\n                    Generate Landscape\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new Dijkstra());\r\n                    }}\r\n                >\r\n                    Dijkstra\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new DFS());\r\n                    }}\r\n                >\r\n                    DFS\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new BFS());\r\n                    }}\r\n                >\r\n                    BFS\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.clearPath();\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import PathfindingAlgorithm, { PathData } from './PathfindingAlgorithm';\r\nimport { Node, Position } from '../IPathfinder';\r\nimport { PriorityQueue } from './DataStructures/PriorityQueue';\r\n\r\nexport default class Dijkstra extends PathfindingAlgorithm {\r\n    minHeap: PriorityQueue<Position> = new PriorityQueue<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid, startPos);\r\n        this.minHeap.insert(startPos, 0);\r\n        while (this.minHeap.size() !== 0) {\r\n            let closestPosition: Position = this.minHeap.pop();\r\n            this.markAsVisited(closestPosition);\r\n            if (this.equalPosition(closestPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, closestPosition);\r\n            let closestDistance: number = this.pathValues.get(this.hash(closestPosition)).shortestPath;\r\n            for (let neighbor of neighbors) {\r\n                let newDistance: number = closestDistance + this.getDistance(grid, closestPosition, neighbor);\r\n                let neighborPathData: PathData = this.pathValues.get(this.hash(neighbor));\r\n                this.minHeap.insert(neighbor, newDistance);\r\n                if (newDistance < neighborPathData.shortestPath) {\r\n                    let pathData: PathData = {\r\n                        shortestPath: newDistance,\r\n                        isVisited: true,\r\n                        previousNode: closestPosition,\r\n                    };\r\n                    this.pathValues.set(this.hash(neighbor), pathData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public recalculatePath(grid: Node[][], startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.minHeap = new PriorityQueue<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n\r\n    private getDistance(grid: Node[][], current: Position, neighbor: Position): number {\r\n        let weightDifference = grid[neighbor.y][neighbor.x].weight - grid[current.y][current.x].weight;\r\n        return (\r\n            Math.pow(10000, weightDifference) *\r\n            Math.sqrt(Math.pow(Math.abs(current.x - neighbor.x), 2) + Math.pow(Math.abs(current.y - neighbor.y), 2))\r\n        );\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>, startPos: Position): void {\r\n        grid.forEach((row) => {\r\n            return row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let shortestPath: number;\r\n                if (this.equalPosition(startPos, nodePosition)) {\r\n                    shortestPath = 0;\r\n                } else {\r\n                    shortestPath = Infinity;\r\n                }\r\n                let pathData: PathData = { shortestPath: shortestPath, isVisited: false, previousNode: null };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    findShortestPath(finishPos: Position): void {\r\n        for (\r\n            let curPosition = finishPos;\r\n            curPosition != null;\r\n            curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n}\r\n","export interface Node {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport type Tuple<T> = [T, number];\r\n\r\nexport class PriorityQueue<T extends Node> {\r\n    heap: Tuple<T>[] = [];\r\n\r\n    constructor() {}\r\n\r\n    insert(val: T, priority: number) {\r\n        if (!this.heap.length || this.heap[this.heap.length - 1][1] > priority) {\r\n            this.heap.push([val, priority]);\r\n            return this.heap;\r\n        }\r\n\r\n        const tmp: Tuple<T>[] = [];\r\n        let found = false;\r\n\r\n        for (let i = 0; i < this.heap.length; i++) {\r\n            const p = this.heap[i][1];\r\n\r\n            if (priority >= p && !found) {\r\n                tmp.push([val, priority]);\r\n                found = true;\r\n            }\r\n\r\n            tmp.push(this.heap[i]);\r\n        }\r\n\r\n        return (this.heap = tmp);\r\n    }\r\n\r\n    has({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return !!foundNode;\r\n    }\r\n\r\n    get({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return foundNode && foundNode[0];\r\n    }\r\n\r\n    shift(priority: boolean) {\r\n        const tuple = this.heap.shift();\r\n        if (priority) {\r\n            return tuple;\r\n        }\r\n\r\n        return tuple ? tuple[0] : undefined;\r\n    }\r\n\r\n    pop() {\r\n        return this.heap.pop()[0];\r\n    }\r\n\r\n    priorities() {\r\n        return this.heap.map(([_, p]) => p);\r\n    }\r\n\r\n    values() {\r\n        return this.heap.map(([val]) => val);\r\n    }\r\n\r\n    size() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    toArray(values: boolean) {\r\n        if (values) {\r\n            return this.heap.map(([val]) => val);\r\n        }\r\n        return this.heap;\r\n    }\r\n}\r\n","import PathfindingAlgorithm from './PathfindingAlgorithm';\r\nimport Stack from './DataStructures/Stack';\r\nimport { Position, Node } from '../IPathfinder';\r\n\r\nexport default class DFS extends PathfindingAlgorithm {\r\n    stack: Stack<Position> = new Stack<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid);\r\n        this.stack.push(startPos);\r\n        while (!this.stack.isEmpty()) {\r\n            let curPosition: Position = this.stack.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.finalPath = this.visitedNodesInOrder;\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition).reverse();\r\n            for (let neighbor of neighbors) {\r\n                this.stack.push(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                this.pathValues.set(this.hash(nodePosition), { isVisited: false });\r\n            });\r\n        });\r\n    }\r\n\r\n    recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.stack = new Stack<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n}\r\n","export default class Stack<T> {\r\n    data: Array<T> = [];\r\n    top: number = 0;\r\n    public push(element: T): void {\r\n        this.data[this.top] = element;\r\n        this.top++;\r\n    }\r\n    public pop(): T {\r\n        this.top--;\r\n        return this.data[this.top];\r\n    }\r\n    // public peek(): T {\r\n    //     return this.data[this.top - 1];\r\n    // }\r\n    public isEmpty(): boolean {\r\n        return this.top === 0;\r\n    }\r\n}\r\n","import PathfindingAlgorithm, { PathData } from './PathfindingAlgorithm';\r\nimport Queue from './DataStructures/Queue';\r\nimport { Node, Position } from '../IPathfinder';\r\n\r\nexport default class BFS extends PathfindingAlgorithm {\r\n    queue: Queue<Position> = new Queue<Position>();\r\n\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.setMap(grid);\r\n        this.queue.push(startPos);\r\n        while (!this.queue.isEmpty()) {\r\n            let curPosition: Position = this.queue.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition);\r\n            for (let neighbor of neighbors) {\r\n                this.queue.push(neighbor);\r\n                this.pathValues.set(this.hash(neighbor), { isVisited: true, previousNode: curPosition });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let pathData: PathData = {\r\n                    isVisited: false,\r\n                    previousNode: null,\r\n                };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    private findShortestPath(finishPos: Position) {\r\n        for (\r\n            let curPosition = finishPos;\r\n            curPosition != null;\r\n            curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n\r\n    recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.clear();\r\n        this.queue = new Queue<Position>();\r\n        this.calculatePath(grid, startPos, finishPos);\r\n    }\r\n}\r\n","export default class Queue<T> {\r\n    data: Array<T> = [];\r\n    push(element: T) {\r\n        this.data.push(element);\r\n    }\r\n    pop(): T {\r\n        return this.data.shift();\r\n    }\r\n    isEmpty(): boolean {\r\n        return this.data.length === 0;\r\n    }\r\n}\r\n","// Credit to https://github.com/Bartvds/lorez/blob/master/src/extra/PerlinNoise.ts\r\n\r\nexport default class PerlinNoise {\r\n\r\n\tprivate p: number[];\r\n\tprivate permutation: number[];\r\n\r\n\tconstructor() {\r\n\t\t// To remove the need for index wrapping, double the permutation table length\r\n\t\tthis.permutation = [ 151, 160, 137, 91, 90, 15,\r\n\t\t\t131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\r\n\t\t\t190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\r\n\t\t\t88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\r\n\t\t\t77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\r\n\t\t\t102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\r\n\t\t\t135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\r\n\t\t\t5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\r\n\t\t\t223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\r\n\t\t\t129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\r\n\t\t\t251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\r\n\t\t\t49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n\t\t\t138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\r\n\t\t];\r\n\t\tthis.p = new Array(512);\r\n\r\n\t\tfor (var i = 0; i < 256; i++) {\r\n\t\t\tthis.p[256 + i] = this.p[i] = this.permutation[i];\r\n\t\t}\r\n\t}\r\n\r\n\tnoise(x: number, y: number, z: number): number {\r\n\t\tvar X = Math.floor(x) & 255;     // FIND UNIT CUBE THAT\r\n\t\tvar Y = Math.floor(y) & 255;     // CONTAINS POINT.\r\n\t\tvar Z = Math.floor(z) & 255;\r\n\r\n\t\tx -= Math.floor(x);              // FIND RELATIVE X,Y,Z\r\n\t\ty -= Math.floor(y);              // OF POINT IN CUBE.\r\n\t\tz -= Math.floor(z);\r\n\r\n\t\tvar u = this.fade(x);            // COMPUTE FADE CURVES\r\n\t\tvar v = this.fade(y);            // FOR EACH OF X,Y,Z.\r\n\t\tvar w = this.fade(z);\r\n\r\n\t\tvar A = this.p[X] + Y;\r\n\t\tvar AA = this.p[A] + Z;\r\n\t\tvar AB = this.p[A + 1] + Z;      // HASH COORDINATES OF\r\n\r\n\t\tvar B = this.p[X + 1] + Y;\r\n\t\tvar BA = this.p[B] + Z;\r\n\t\tvar BB = this.p[B + 1] + Z;      // THE 8 CUBE CORNERS,\r\n\r\n\t\treturn this.scale(this.lerp(w, this.lerp(v, this.lerp(u, this.grad(this.p[AA  ], x, y, z),  // AND ADD\r\n\t\t\t\t\tthis.grad(this.p[BA], x - 1, y, z)), // BLENDED\r\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB], x, y - 1, z),  // RESULTS\r\n\t\t\t\t\tthis.grad(this.p[BB], x - 1, y - 1, z))),// FROM  8\r\n\t\t\tthis.lerp(v, this.lerp(u, this.grad(this.p[AA + 1], x, y, z - 1),  // CORNERS\r\n\t\t\t\t\tthis.grad(this.p[BA + 1], x - 1, y, z - 1)), // OF CUBE\r\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB + 1], x, y - 1, z - 1),\r\n\t\t\t\t\tthis.grad(this.p[BB + 1], x - 1, y - 1, z - 1)))));\r\n\t}\r\n\r\n\tfade(t: number): number {\r\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\r\n\t}\r\n\r\n\tlerp(t: number, a: number, b: number): number {\r\n\t\treturn a + t * (b - a);\r\n\t}\r\n\r\n\tgrad(hash: number, x: number, y: number, z: number): number {\r\n\t\tvar h = hash & 15;      // CONVERT LO 4 BITS OF HASH CODE\r\n\t\tvar u = h < 8 ? x : y;  // INTO 12 GRADIENT DIRECTIONS.\r\n\t\tvar v = h < 4 ? y : h == 12 || h == 14 ? x : z;\r\n\t\treturn ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\r\n\t}\r\n\r\n\tscale(n: number): number {\r\n\t\treturn (1 + n) / 2;\r\n\t}\r\n}"],"sourceRoot":""}