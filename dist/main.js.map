{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/IPathfinder.tsx","webpack:///./src/Algorithms/PathfindingAlgorithm.tsx","webpack:///./src/mazes/MazeGenerator.ts","webpack:///./src/mazes/wallCarver.ts","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/App.tsx","webpack:///./src/Pathfinder.tsx","webpack:///./src/Cell.tsx","webpack:///./src/Navbar.tsx","webpack:///./src/Algorithms/Dijkstra.tsx","webpack:///./src/Algorithms/DataStructures/PriorityQueue.tsx","webpack:///./src/Algorithms/DFS.ts","webpack:///./src/Algorithms/DataStructures/Stack.tsx","webpack:///./src/Algorithms/BFS.tsx","webpack:///./src/Algorithms/DataStructures/Queue.ts","webpack:///./src/mazes/RecursiveDivision.ts","webpack:///./src/mazes/RecursiveBacktracking.ts","webpack:///./src/mazes/Ellers.ts","webpack:///./src/Algorithms/Perlin/PerlinNoise.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","GRID_W","GRID_H","DEFAULT_START_POS","x","Math","floor","y","DEFAULT_FINISH_POS","UPDATE_RATE","MouseState","NodeType","pathValues","Map","finalPath","visitedNodesInOrder","this","slice","length","grid","position","neighbors","push","filter","neighbor","nodeType","Wall","isVisited","cornerCheck","hash","pathData","newPathData","set","pos1","pos2","toString","min","max","random","wallsCreatedInOrder","ADJUSTED_WIDTH","ADJUSTED_HEIGHT","WallCarver","topBorderWall","botBorderWall","addWall","middleWall","crossWall","current","positionBetween","ReactDOM","render","document","getElementById","App","Component","props","super","state","className","Pathfinder","references","Array","fill","map","createRef","row","curRow","col","newNode","Unvisited","weight","startPos","finishPos","midpointPos","mouseState","PlacingWall","isMouseDown","updateLock","perlinToggle","prevAlgorithm","nextProps","nextState","node","eventType","Disabled","onMouseDown","onMouseUp","onMouseEnter","MovingStart","MovingFinish","MovingMidpoint","isEmpty","isStart","isFinish","isMidpoint","RemovingWall","clearPath","setState","recalculatePath","visitedPaths","finalPaths","calculatePath","produceVisitedInOrder","produceFinalPath","console","log","idx","visited","pos","VisitedOne","VisitedOverlap","VisitedTwo","path","ShortestPath","algorithm","visualiseAlgorithm","visitedInOrder","shortestPath","lockRender","visualiseVisited","visualisePath","concat","unlockRender","count","Promise","resolve","setTimeout","ref","includes","perlin","seed","newWeight","noise","mazeGenerator","walls","generateWalls","visualizeMaze","wallAlreadyPlaced","wall","nextMidPoint","performAlgorithm","generateLandscape","generateMaze","rowIdx","cell","colIdx","updateMouseState","setMidpoint","nodeRef","Cell","event","nativeEvent","which","type","rbgVal","backgroundColor","convertWeightToGreyscale","id","style","handleMouseEvent","onContextMenu","preventDefault","Navbar","onClick","Dijkstra","minHeap","PriorityQueue","reset","setMap","insert","size","closestPosition","pop","markAsVisited","equalPosition","findShortestPath","getNeighbors","closestDistance","newDistance","getDistance","neighborPathData","previousNode","weightDifference","pow","sqrt","abs","forEach","nodePosition","Infinity","curPosition","unshift","clear","heap","val","priority","tmp","found","find","foundNode","tuple","shift","undefined","_","values","DFS","stack","reverse","data","top","element","BFS","queue","RecursiveDivision","gapMap","lr","divide","ul","width","height","splitIdx","gap","newLr","newUl","vertical","getRandom","up","down","has","left","right","RecursiveBacktracking","createStartingWalls","randomPos","carveWalls","visit","getUnvisitedNeighbors","isVisisted","placeWallBetweenPositions","positionInBounds","randomisePositions","positions","sort","Ellers","currentRow","Uptree","mergeRow","prevRow","extendToNextRow","isRoot","addEntry","addTopWall","randomBool","getEntry","sameClass","mergeSets","addRightWall","set1","set2","getRoot","index1","index2","index","permutation","z","X","Y","Z","u","fade","v","w","A","AA","AB","B","BA","BB","scale","lerp","grad","a","b","h"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = React;","import PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\n\r\nexport const GRID_W = 41;\r\nexport const GRID_H = 21;\r\nexport const DEFAULT_START_POS: Position = { x: Math.floor(GRID_W / 4), y: Math.floor(GRID_H / 2) };\r\nexport const DEFAULT_FINISH_POS: Position = { x: GRID_W - DEFAULT_START_POS.x, y: DEFAULT_START_POS.y };\r\nexport const UPDATE_RATE = 5;\r\n\r\nexport interface Position {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport enum MouseState {\r\n    PlacingWall,\r\n    RemovingWall,\r\n    MovingStart,\r\n    MovingFinish,\r\n    MovingMidpoint,\r\n    Disabled,\r\n}\r\nexport enum NodeType {\r\n    Unvisited,\r\n    VisitedOne,\r\n    VisitedTwo,\r\n    VisitedOverlap,\r\n    Wall,\r\n    ShortestPath,\r\n}\r\nexport interface Node {\r\n    position: Position;\r\n    nodeType: NodeType;\r\n    weight: number;\r\n}\r\n","import { GRID_H, GRID_W, Node, NodeType, Position } from '../IPathfinder';\r\n\r\nexport interface PathData {\r\n    isVisited: boolean;\r\n    shortestPath?: number;\r\n    previousNode?: Position;\r\n}\r\n\r\nexport default abstract class PathfindingAlgorithm {\r\n    pathValues: Map<string, PathData> = new Map<string, PathData>();\r\n    finalPath: Array<Position> = [];\r\n    visitedNodesInOrder: Array<Position> = [];\r\n\r\n    protected abstract setMap(grid: Array<Array<Node>>, startPos?: Position): void;\r\n\r\n    public abstract calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    // public abstract recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void;\r\n\r\n    public produceVisitedInOrder(): Array<Position> {\r\n        return this.visitedNodesInOrder.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    public produceFinalPath(): Array<Position> {\r\n        return this.finalPath.slice(1, this.visitedNodesInOrder.length - 1);\r\n    }\r\n\r\n    protected getNeighbors(grid: Array<Array<Node>>, position: Position): Array<Position> {\r\n        let neighbors: Array<Position> = [];\r\n        neighbors.push({ x: position.x + 1, y: position.y });\r\n        neighbors.push({ x: position.x, y: position.y + 1 });\r\n        neighbors.push({ x: position.x, y: position.y - 1 });\r\n        neighbors.push({ x: position.x - 1, y: position.y });\r\n\r\n        neighbors.push({ x: position.x - 1, y: position.y + 1 });\r\n        neighbors.push({ x: position.x + 1, y: position.y + 1 });\r\n        neighbors.push({ x: position.x + 1, y: position.y - 1 });\r\n        neighbors.push({ x: position.x - 1, y: position.y - 1 });\r\n\r\n        return neighbors.filter((neighbor) => {\r\n            return (\r\n                neighbor.x >= 0 &&\r\n                neighbor.x < GRID_W &&\r\n                neighbor.y >= 0 &&\r\n                neighbor.y < GRID_H &&\r\n                grid[neighbor.y][neighbor.x].nodeType !== NodeType.Wall &&\r\n                !this.isVisited(neighbor) &&\r\n                this.cornerCheck(position, neighbor, grid)\r\n            );\r\n        });\r\n    }\r\n\r\n    private cornerCheck(position: Position, neighbor: Position, grid: Array<Array<Node>>): boolean {\r\n        return (\r\n            grid[position.y][neighbor.x].nodeType !== NodeType.Wall ||\r\n            grid[neighbor.y][position.x].nodeType !== NodeType.Wall\r\n        );\r\n    }\r\n\r\n    protected isVisited(position: Position): boolean {\r\n        return this.pathValues.get(this.hash(position)).isVisited;\r\n    }\r\n\r\n    protected markAsVisited(position: Position): void {\r\n        this.visitedNodesInOrder.push(position);\r\n        let pathData: PathData = this.pathValues.get(this.hash(position));\r\n        let newPathData: PathData = {\r\n            ...pathData,\r\n            isVisited: true,\r\n        };\r\n        this.pathValues.set(this.hash(position), newPathData);\r\n    }\r\n\r\n    protected equalPosition(pos1: Position, pos2: Position) {\r\n        return pos1.x === pos2.x && pos1.y === pos2.y;\r\n    }\r\n\r\n    protected hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n\r\n    protected clear(): void {\r\n        this.visitedNodesInOrder = [];\r\n        this.finalPath = [];\r\n        this.pathValues = new Map<string, PathData>();\r\n    }\r\n\r\n    protected abstract reset(): void;\r\n}\r\n","import { Position } from './../IPathfinder';\r\nexport default abstract class MazeGenerator {\r\n    wallsCreatedInOrder: Position[];\r\n    public abstract generateWalls(): Position[];\r\n    protected getRandom(min: number, max: number): number {\r\n        return min + Math.floor((max - min + 1) * Math.random());\r\n    }\r\n    protected addWall(position: Position) {\r\n        this.wallsCreatedInOrder.push(position);\r\n    }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\n\r\nexport const ADJUSTED_WIDTH = (GRID_W - 1) / 2;\r\nexport const ADJUSTED_HEIGHT = (GRID_H - 1) / 2;\r\n\r\nexport default abstract class WallCarver extends MazeGenerator {\r\n    protected createStartingWalls(): void {\r\n        for (let i = 0; i < GRID_W; i++) {\r\n            let topBorderWall: Position = { x: i, y: 0 };\r\n            let botBorderWall: Position = { x: i, y: GRID_H - 1 };\r\n            this.addWall(topBorderWall);\r\n            this.addWall(botBorderWall);\r\n        }\r\n        for (let x = 0; x < GRID_W; x += 2) {\r\n            for (let y = 1; y < GRID_H - 1; y++) {\r\n                let middleWall: Position = { x: x, y: y };\r\n                this.addWall(middleWall);\r\n            }\r\n        }\r\n        for (let x = 1; x < GRID_W - 1; x += 2) {\r\n            for (let y = 2; y < GRID_H - 2; y += 2) {\r\n                let crossWall: Position = { x: x, y: y };\r\n                this.addWall(crossWall);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected placeWallBetweenPositions(current: Position, neighbor: Position): void {\r\n        let positionBetween: Position = {\r\n            x: Math.floor((current.x + neighbor.x) / 2),\r\n            y: Math.floor((current.y + neighbor.y) / 2),\r\n        };\r\n        this.addWall(positionBetween);\r\n    }\r\n\r\n    protected positionInBounds(position: Position): boolean {\r\n        return position.x > 0 && position.x < GRID_W - 1 && position.y > 0 && position.y < GRID_H - 1;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","module.exports = ReactDOM;","import * as React from 'react';\r\nimport Pathfinder from '../Pathfinder';\r\nimport { Component } from 'react';\r\n\r\nexport default class App extends Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"app\">\r\n                <Pathfinder />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n    Node,\r\n    NodeType,\r\n    Position,\r\n    MouseState,\r\n    GRID_W,\r\n    GRID_H,\r\n    DEFAULT_START_POS,\r\n    DEFAULT_FINISH_POS,\r\n    UPDATE_RATE,\r\n} from './IPathfinder';\r\nimport { Component, createRef, RefObject } from 'react';\r\nimport Cell from './Cell';\r\nimport Navbar from './Navbar';\r\nimport PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\nimport PerlinNoise from './Algorithms/Perlin/PerlinNoise';\r\nimport MazeGenerator from './mazes/MazeGenerator';\r\n\r\ninterface State {\r\n    grid: Node[][];\r\n    startPos: Position;\r\n    finishPos: Position;\r\n    midpointPos: Position;\r\n    mouseState: MouseState;\r\n    isMouseDown: boolean;\r\n    updateLock: boolean;\r\n    perlinToggle: boolean;\r\n    prevAlgorithm: PathfindingAlgorithm;\r\n}\r\n\r\nexport default class Pathfinder extends Component<{}, State> {\r\n    references: Array<Array<RefObject<HTMLDivElement> | any>> = Array(GRID_H)\r\n        .fill([])\r\n        .map(() =>\r\n            Array(GRID_W)\r\n                .fill(0)\r\n                .map(() => createRef()),\r\n        );\r\n    constructor(props: any) {\r\n        super(props);\r\n        // this.references = Array(GRID_H)\r\n        //     .fill([])\r\n        //     .map(() =>\r\n        //         Array(GRID_W)\r\n        //             .fill(0)\r\n        //             .map(() => createRef()),\r\n        //     );\r\n        let grid: Node[][] = [];\r\n        for (let row = 0; row < GRID_H; row++) {\r\n            let curRow: Array<Node> = [];\r\n            for (let col = 0; col < GRID_W; col++) {\r\n                let newNode: Node = { position: { x: col, y: row }, nodeType: NodeType.Unvisited, weight: 0 };\r\n                curRow.push(newNode);\r\n            }\r\n            grid.push(curRow);\r\n        }\r\n        this.state = {\r\n            grid: grid,\r\n            startPos: DEFAULT_START_POS,\r\n            finishPos: DEFAULT_FINISH_POS,\r\n            midpointPos: null,\r\n            mouseState: MouseState.PlacingWall,\r\n            isMouseDown: false,\r\n            updateLock: false,\r\n            perlinToggle: false,\r\n            prevAlgorithm: null,\r\n        };\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<{}>, nextState: Readonly<State>): boolean {\r\n        return !nextState.updateLock;\r\n    }\r\n\r\n    clearPath(): Node[][] {\r\n        let grid: Node[][] = this.state.grid;\r\n        grid = grid.map((row) => {\r\n            return row.map((node) => {\r\n                return {\r\n                    ...node,\r\n                    nodeType: node.nodeType === NodeType.Wall ? NodeType.Wall : NodeType.Unvisited,\r\n                };\r\n            });\r\n        });\r\n        return grid;\r\n    }\r\n\r\n    updateMouseState(position: Position, eventType: string): void {\r\n        if (this.state.mouseState === MouseState.Disabled) return;\r\n        switch (eventType) {\r\n            case 'mousedown': {\r\n                this.onMouseDown(position);\r\n                break;\r\n            }\r\n            case 'mouseup': {\r\n                this.onMouseUp();\r\n                break;\r\n            }\r\n            case 'mouseenter': {\r\n                this.onMouseEnter(position);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onMouseDown(position: Position) {\r\n        let { grid, mouseState, isMouseDown, prevAlgorithm } = this.state;\r\n        let nodeType: NodeType = grid[position.y][position.x].nodeType;\r\n        if (\r\n            (mouseState === MouseState.MovingStart ||\r\n                mouseState === MouseState.MovingFinish ||\r\n                mouseState === MouseState.MovingMidpoint) &&\r\n            !this.isEmpty(position)\r\n        )\r\n            return;\r\n\r\n        if (this.isStart(position)) {\r\n            mouseState = MouseState.MovingStart;\r\n        } else if (this.isFinish(position)) {\r\n            mouseState = MouseState.MovingFinish;\r\n        } else if (this.isMidpoint(position)) {\r\n            mouseState = MouseState.MovingMidpoint;\r\n        } else if (nodeType === NodeType.Unvisited) {\r\n            mouseState = MouseState.PlacingWall;\r\n        } else {\r\n            mouseState = MouseState.RemovingWall;\r\n        }\r\n\r\n        if (this.isEmpty(position)) {\r\n            if (prevAlgorithm !== null) {\r\n                grid = this.clearPath();\r\n                prevAlgorithm = null;\r\n            }\r\n            if (nodeType === NodeType.Wall) {\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n            } else {\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n            }\r\n        }\r\n        isMouseDown = true;\r\n        this.setState({ grid: grid, mouseState: mouseState, isMouseDown: isMouseDown, prevAlgorithm: prevAlgorithm });\r\n    }\r\n\r\n    private onMouseUp() {\r\n        let mouseState = MouseState.PlacingWall;\r\n        let isMouseDown = false;\r\n        this.setState({ mouseState: mouseState, isMouseDown: isMouseDown });\r\n    }\r\n\r\n    private onMouseEnter(position: Position) {\r\n        let { grid, startPos, finishPos, midpointPos, mouseState, isMouseDown, prevAlgorithm } = this.state;\r\n        if (!isMouseDown || this.isStart(position) || this.isFinish(position) || this.isMidpoint(position)) return;\r\n\r\n        switch (mouseState) {\r\n            case MouseState.MovingStart:\r\n                startPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, midpointPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ startPos: startPos });\r\n                }\r\n                break;\r\n            case MouseState.MovingFinish:\r\n                finishPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, midpointPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ finishPos: finishPos });\r\n                }\r\n                break;\r\n            case MouseState.MovingMidpoint:\r\n                midpointPos = position;\r\n                if (prevAlgorithm !== null) {\r\n                    this.recalculatePath(startPos, finishPos, midpointPos, prevAlgorithm);\r\n                } else {\r\n                    this.setState({ midpointPos: midpointPos });\r\n                }\r\n                break;\r\n            case MouseState.PlacingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                this.setState({ grid: grid });\r\n                break;\r\n            case MouseState.RemovingWall:\r\n                grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                this.setState({ grid: grid });\r\n                break;\r\n        }\r\n    }\r\n\r\n    private recalculatePath(\r\n        startPos: Position,\r\n        finishPos: Position,\r\n        midpointPos: Position,\r\n        prevAlgorithm: PathfindingAlgorithm,\r\n    ) {\r\n        let grid: Node[][] = this.clearPath();\r\n        let visitedPaths: Position[][] = [];\r\n        let finalPaths: Position[][] = [];\r\n        if (midpointPos === null) {\r\n            prevAlgorithm.calculatePath(grid, startPos, finishPos);\r\n            visitedPaths.push(prevAlgorithm.produceVisitedInOrder());\r\n            finalPaths.push(prevAlgorithm.produceFinalPath());\r\n        } else {\r\n            prevAlgorithm.calculatePath(grid, startPos, midpointPos);\r\n            visitedPaths.push(prevAlgorithm.produceVisitedInOrder());\r\n            finalPaths.push(prevAlgorithm.produceFinalPath());\r\n\r\n            prevAlgorithm.calculatePath(grid, midpointPos, finishPos);\r\n            visitedPaths.push(prevAlgorithm.produceVisitedInOrder());\r\n            finalPaths.push(prevAlgorithm.produceFinalPath());\r\n        }\r\n\r\n        console.log(visitedPaths);\r\n\r\n        for (let idx = 0; idx < visitedPaths.length; idx++) {\r\n            let visited: Position[] = visitedPaths[idx];\r\n            for (let pos of visited) {\r\n                if (idx === 0) {\r\n                    grid[pos.y][pos.x].nodeType = NodeType.VisitedOne;\r\n                } else if (grid[pos.y][pos.x].nodeType === NodeType.VisitedOne) {\r\n                    grid[pos.y][pos.x].nodeType = NodeType.VisitedOverlap;\r\n                } else {\r\n                    grid[pos.y][pos.x].nodeType = NodeType.VisitedTwo;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let path of finalPaths) {\r\n            for (let pos of path) {\r\n                grid[pos.y][pos.x].nodeType = NodeType.ShortestPath;\r\n            }\r\n        }\r\n\r\n        this.setState({ grid: grid, startPos: startPos, finishPos: finishPos, midpointPos: midpointPos });\r\n    }\r\n\r\n    private isEmpty(position: Position) {\r\n        return !this.isStart(position) && !this.isFinish(position) && !this.isMidpoint(position);\r\n    }\r\n\r\n    private isStart(position: Position) {\r\n        return position.x === this.state.startPos.x && position.y === this.state.startPos.y;\r\n    }\r\n\r\n    private isFinish(position: Position) {\r\n        return position.x === this.state.finishPos.x && position.y === this.state.finishPos.y;\r\n    }\r\n\r\n    private isMidpoint(position: Position) {\r\n        return (\r\n            this.state.midpointPos !== null &&\r\n            position.x === this.state.midpointPos.x &&\r\n            position.y === this.state.midpointPos.y\r\n        );\r\n    }\r\n\r\n    private performAlgorithm(algorithm: PathfindingAlgorithm): void {\r\n        let midpointPos = this.state.midpointPos;\r\n        this.setState({ prevAlgorithm: algorithm, mouseState: MouseState.Disabled });\r\n        let visitedPaths: Position[][] = [];\r\n        let finalPaths: Position[][] = [];\r\n        if (midpointPos === null) {\r\n            algorithm.calculatePath(this.state.grid, this.state.startPos, this.state.finishPos);\r\n            visitedPaths.push(algorithm.produceVisitedInOrder());\r\n            finalPaths.push(algorithm.produceFinalPath());\r\n        } else {\r\n            algorithm.calculatePath(this.state.grid, this.state.startPos, this.state.midpointPos);\r\n            visitedPaths.push(algorithm.produceVisitedInOrder());\r\n            finalPaths.push(algorithm.produceFinalPath());\r\n\r\n            algorithm.calculatePath(this.state.grid, this.state.midpointPos, this.state.finishPos);\r\n            visitedPaths.push(algorithm.produceVisitedInOrder());\r\n            finalPaths.push(algorithm.produceFinalPath());\r\n        }\r\n\r\n        this.visualiseAlgorithm(visitedPaths, finalPaths);\r\n        this.setState({ mouseState: MouseState.PlacingWall });\r\n    }\r\n\r\n    private visualiseAlgorithm(visitedInOrder: Position[][], shortestPath: Position[][]): void {\r\n        (async () => {\r\n            this.lockRender();\r\n            for (let idx = 0; idx < visitedInOrder.length; idx++) {\r\n                let visited: Position[] = visitedInOrder[idx];\r\n                await this.visualiseVisited(visited, idx);\r\n            }\r\n\r\n            await this.visualisePath([].concat(...shortestPath));\r\n            this.unlockRender();\r\n        })();\r\n    }\r\n\r\n    private visualiseVisited(visitedInOrder: Array<Position>, count: number): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= visitedInOrder.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === visitedInOrder.length) {\r\n                        resolve();\r\n                    } else {\r\n                        let position: Position = visitedInOrder[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (\r\n                            !className.includes('cell-start') &&\r\n                            !className.includes('cell-finish') &&\r\n                            !className.includes('cell-midpoint')\r\n                        ) {\r\n                            if (className.includes('cell-visited-0')) {\r\n                                ref.current.className = `cell cell-visited-overlap`;\r\n                            } else {\r\n                                ref.current.className = `cell cell-visited-${count}`;\r\n                            }\r\n                            let grid: Node[][] = this.state.grid;\r\n                            if (count === 0) {\r\n                                grid[position.y][position.x].nodeType = NodeType.VisitedOne;\r\n                            } else if (grid[position.y][position.x].nodeType === NodeType.VisitedOne) {\r\n                                grid[position.y][position.x].nodeType = NodeType.VisitedOverlap;\r\n                            } else {\r\n                                grid[position.y][position.x].nodeType = NodeType.VisitedTwo;\r\n                            }\r\n                            this.setState({ grid: grid });\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private visualisePath(shortestPath: Position[]): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= shortestPath.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === shortestPath.length) {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, UPDATE_RATE);\r\n                    } else {\r\n                        let position: Position = shortestPath[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (\r\n                            !className.includes('cell-start') &&\r\n                            !className.includes('cell-finish') &&\r\n                            !className.includes('cell-midpoint')\r\n                        ) {\r\n                            ref.current.className = 'cell cell-shortestPath';\r\n                            let grid: Node[][] = this.state.grid;\r\n                            grid[position.y][position.x].nodeType = NodeType.ShortestPath;\r\n                            this.setState({ grid: grid });\r\n                        }\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private lockRender() {\r\n        this.setState({ updateLock: true });\r\n    }\r\n\r\n    private unlockRender() {\r\n        this.setState({ updateLock: false });\r\n    }\r\n\r\n    private generateLandscape() {\r\n        const STEEPNESS: number = 0.2;\r\n        const perlin: PerlinNoise = new PerlinNoise();\r\n        const seed: number = Math.floor(Math.random() * 10000);\r\n\r\n        let grid: Node[][] = this.state.grid;\r\n        for (let y: number = 0; y < GRID_H; y++) {\r\n            for (let x: number = 0; x < GRID_W; x++) {\r\n                let newWeight = perlin.noise(x * STEEPNESS + seed, y * STEEPNESS + seed, 0);\r\n                grid[y][x].weight = newWeight;\r\n            }\r\n        }\r\n        console.log(grid);\r\n        this.setState({ grid: grid });\r\n    }\r\n\r\n    private generateMaze(mazeGenerator: MazeGenerator): void {\r\n        (async () => {\r\n            this.lockRender();\r\n            let walls: Position[] = mazeGenerator.generateWalls();\r\n            await this.visualizeMaze(walls);\r\n            this.unlockRender();\r\n            this.setState({ mouseState: MouseState.PlacingWall });\r\n        })();\r\n    }\r\n\r\n    private visualizeMaze(walls: Position[]): Promise<void> {\r\n        return new Promise<void>((resolve) => {\r\n            for (let i = 0; i <= walls.length; i++) {\r\n                setTimeout(() => {\r\n                    if (i === walls.length) {\r\n                        setTimeout(() => {\r\n                            resolve();\r\n                        }, UPDATE_RATE);\r\n                    } else {\r\n                        let grid: Node[][] = this.state.grid;\r\n                        let position: Position = walls[i];\r\n                        let ref: RefObject<HTMLDivElement> = this.references[position.y][position.x];\r\n                        let className: string = ref.current.className;\r\n                        if (this.wallAlreadyPlaced(position)) {\r\n                            if (!className.includes('cell-start') && !className.includes('cell-finish')) {\r\n                                ref.current.className = 'cell cell-unvisited';\r\n                            }\r\n                            grid[position.y][position.x].nodeType = NodeType.Unvisited;\r\n                        } else {\r\n                            if (\r\n                                !className.includes('cell-start') &&\r\n                                !className.includes('cell-finish') &&\r\n                                !className.includes('cell-midpoint')\r\n                            ) {\r\n                                ref.current.className = 'cell cell-wall';\r\n                            }\r\n                            grid[position.y][position.x].nodeType = NodeType.Wall;\r\n                        }\r\n\r\n                        this.setState({ grid: grid });\r\n                    }\r\n                }, UPDATE_RATE * i);\r\n            }\r\n        });\r\n    }\r\n\r\n    private wallAlreadyPlaced(wall: Position): boolean {\r\n        const grid = this.state.grid;\r\n        return grid[wall.y][wall.x].nodeType === NodeType.Wall;\r\n    }\r\n\r\n    setMidpoint(position: Position): void {\r\n        let prevAlgorithm = this.state.prevAlgorithm;\r\n        let grid = this.state.grid;\r\n        if (!this.isStart(position) && !this.isFinish(position)) {\r\n            let nextMidPoint: Position;\r\n            if (this.isMidpoint(position)) {\r\n                nextMidPoint = null;\r\n            } else {\r\n                nextMidPoint = position;\r\n            }\r\n            //\r\n            if (prevAlgorithm !== null) {\r\n                prevAlgorithm = null;\r\n                grid = this.clearPath();\r\n            }\r\n            //\r\n            this.setState({ grid: grid, prevAlgorithm: prevAlgorithm, midpointPos: nextMidPoint });\r\n        }\r\n    }\r\n\r\n    public render(): any {\r\n        const grid = this.state.grid;\r\n        return (\r\n            <div>\r\n                <Navbar\r\n                    performAlgorithm={(algorithm: PathfindingAlgorithm) => this.performAlgorithm(algorithm)}\r\n                    clearPath={() => this.setState({ prevAlgorithm: null, grid: this.clearPath() })}\r\n                    generateLandscape={() => this.generateLandscape()}\r\n                    generateMaze={(mazeGenerator: MazeGenerator) => this.generateMaze(mazeGenerator)}\r\n                />\r\n                <div className=\"grid\">\r\n                    {grid.map((row: Array<Node>, rowIdx) => {\r\n                        return (\r\n                            <div className=\"grid-row\" key={rowIdx}>\r\n                                {row.map((cell: Node, colIdx) => {\r\n                                    let position: Position = { x: colIdx, y: rowIdx };\r\n                                    return (\r\n                                        <Cell\r\n                                            position={{ x: colIdx, y: rowIdx }}\r\n                                            isStart={this.isStart(position)}\r\n                                            isFinish={this.isFinish(position)}\r\n                                            isMidpoint={this.isMidpoint(position)}\r\n                                            nodeType={cell.nodeType}\r\n                                            weight={cell.weight}\r\n                                            updateMouseState={(position: Position, eventType: string) =>\r\n                                                this.updateMouseState(position, eventType)\r\n                                            }\r\n                                            setMidpoint={(position: Position) => this.setMidpoint(position)}\r\n                                            nodeRef={this.references[rowIdx][colIdx]}\r\n                                            key={colIdx}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { Component, RefObject } from 'react';\r\nimport { NodeType, Position } from './IPathfinder';\r\n\r\ninterface Props {\r\n    position: Position;\r\n    isStart: boolean;\r\n    isFinish: boolean;\r\n    isMidpoint: boolean;\r\n    nodeType: NodeType;\r\n    weight: number;\r\n    updateMouseState: (position: Position, eventType: string) => void;\r\n    setMidpoint: (position: Position) => void;\r\n    nodeRef: (ref: RefObject<HTMLDivElement> | any) => void;\r\n}\r\n\r\nexport default class Cell extends Component<Props> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleMouseEvent(event: React.MouseEvent<HTMLElement>): void {\r\n        let position: Position = this.props.position;\r\n        if (event.nativeEvent.which === 1) {\r\n            let eventType: string = event.type;\r\n            this.props.updateMouseState(position, eventType);\r\n        } else if (event.nativeEvent.which === 3 && event.type === 'mousedown') {\r\n            this.props.setMidpoint(position);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param weight is a scale of difficulty of node traversal [0,1]\r\n     * @returns greyscale rgb value corresponding to the weight e.g.:\r\n     *          weight 0 produces 'rgb(255,255,255)'\r\n     *          weight 1 produces 'rgb(55,55,55)'\r\n     */\r\n    convertWeightToGreyscale(weight: number): string {\r\n        weight = 1 - weight;\r\n        const min = 55;\r\n        const max = 255;\r\n        const rbgVal = min + (max - min) * weight;\r\n        return `rgb(${rbgVal},${rbgVal},${rbgVal})`;\r\n    }\r\n\r\n    render(): any {\r\n        let { isStart, isFinish, isMidpoint, nodeType, weight } = this.props;\r\n        let className: string;\r\n        if (isStart || isFinish || isMidpoint) {\r\n            className = isStart ? 'cell-start' : isFinish ? 'cell-finish' : isMidpoint ? 'cell-midpoint' : '';\r\n        } else {\r\n            switch (nodeType) {\r\n                case NodeType.Unvisited:\r\n                    className = 'cell-unvisited';\r\n                    break;\r\n                case NodeType.VisitedOne:\r\n                    className = 'cell-visited-0';\r\n                    break;\r\n                case NodeType.VisitedTwo:\r\n                    className = 'cell-visited-1';\r\n                    break;\r\n                case NodeType.VisitedOverlap:\r\n                    className = 'cell-visited-overlap';\r\n                    break;\r\n                case NodeType.Wall:\r\n                    className = 'cell-wall';\r\n                    break;\r\n                case NodeType.ShortestPath:\r\n                    className = 'cell-shortestPath';\r\n                    break;\r\n            }\r\n        }\r\n        // TODO: Proper integration with visual perlin noise, w/o colour degradation with the regular pathfinding module\r\n        let backgroundColor = {};\r\n        if (nodeType !== NodeType.Wall && nodeType !== NodeType.ShortestPath && !isStart && !isFinish && weight > 0) {\r\n            backgroundColor = { backgroundColor: this.convertWeightToGreyscale(weight) };\r\n        }\r\n        return (\r\n            <div\r\n                ref={this.props.nodeRef}\r\n                id={`cell-${this.props.position.x}-${this.props.position.y}`}\r\n                className={`cell ${className}`}\r\n                style={{ ...backgroundColor }}\r\n                onMouseDown={(event) => this.handleMouseEvent(event)}\r\n                onMouseUp={(event) => this.handleMouseEvent(event)}\r\n                onMouseEnter={(event) => this.handleMouseEvent(event)}\r\n                onContextMenu={(event) => event.preventDefault()}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import { Component } from 'react';\r\nimport * as React from 'react';\r\nimport PathfindingAlgorithm from './Algorithms/PathfindingAlgorithm';\r\nimport Dijkstra from './Algorithms/Dijkstra';\r\nimport DFS from './Algorithms/DFS';\r\nimport BFS from './Algorithms/BFS';\r\nimport MazeGenerator from './mazes/MazeGenerator';\r\nimport RecursiveDivision from './mazes/RecursiveDivision';\r\nimport RecursiveBacktracking from './mazes/RecursiveBacktracking';\r\nimport Ellers from './mazes/Ellers';\r\n\r\ninterface Props {\r\n    performAlgorithm: (algorithm: PathfindingAlgorithm) => void;\r\n    clearPath: () => void;\r\n    generateLandscape: () => void;\r\n    generateMaze: (mazeGenerator: MazeGenerator) => void;\r\n}\r\n\r\nexport default class Navbar extends Component<Props> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(): any {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateMaze(new Ellers());\r\n                    }}\r\n                >\r\n                    Ellers\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateMaze(new RecursiveBacktracking());\r\n                    }}\r\n                >\r\n                    Recursive BackTrack\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateMaze(new RecursiveDivision());\r\n                    }}\r\n                >\r\n                    Recursive Division\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.generateLandscape();\r\n                    }}\r\n                >\r\n                    Generate Landscape\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new Dijkstra());\r\n                    }}\r\n                >\r\n                    Dijkstra\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new DFS());\r\n                    }}\r\n                >\r\n                    DFS\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.performAlgorithm(new BFS());\r\n                    }}\r\n                >\r\n                    BFS\r\n                </button>\r\n                <button\r\n                    onClick={() => {\r\n                        this.props.clearPath();\r\n                    }}\r\n                >\r\n                    Clear\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import PathfindingAlgorithm, { PathData } from './PathfindingAlgorithm';\r\nimport { Node, Position } from '../IPathfinder';\r\nimport { PriorityQueue } from './DataStructures/PriorityQueue';\r\n\r\nexport default class Dijkstra extends PathfindingAlgorithm {\r\n    minHeap: PriorityQueue<Position> = new PriorityQueue<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.reset();\r\n        this.setMap(grid, startPos);\r\n        this.minHeap.insert(startPos, 0);\r\n        while (this.minHeap.size() !== 0) {\r\n            let closestPosition: Position = this.minHeap.pop();\r\n            this.markAsVisited(closestPosition);\r\n            if (this.equalPosition(closestPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, closestPosition);\r\n            let closestDistance: number = this.pathValues.get(this.hash(closestPosition)).shortestPath;\r\n            for (let neighbor of neighbors) {\r\n                let newDistance: number = closestDistance + this.getDistance(grid, closestPosition, neighbor);\r\n                let neighborPathData: PathData = this.pathValues.get(this.hash(neighbor));\r\n                this.minHeap.insert(neighbor, newDistance);\r\n                if (newDistance < neighborPathData.shortestPath) {\r\n                    let pathData: PathData = {\r\n                        shortestPath: newDistance,\r\n                        isVisited: true,\r\n                        previousNode: closestPosition,\r\n                    };\r\n                    this.pathValues.set(this.hash(neighbor), pathData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // public recalculatePath(grid: Node[][], startPos: Position, finishPos: Position): void {\r\n    //     this.reset();\r\n    //     this.calculatePath(grid, startPos, finishPos);\r\n    // }\r\n\r\n    private getDistance(grid: Node[][], current: Position, neighbor: Position): number {\r\n        let weightDifference = grid[neighbor.y][neighbor.x].weight - grid[current.y][current.x].weight;\r\n        return (\r\n            Math.pow(10000, weightDifference) *\r\n            Math.sqrt(Math.pow(Math.abs(current.x - neighbor.x), 2) + Math.pow(Math.abs(current.y - neighbor.y), 2))\r\n        );\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>, startPos: Position): void {\r\n        grid.forEach((row) => {\r\n            return row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let shortestPath: number;\r\n                if (this.equalPosition(startPos, nodePosition)) {\r\n                    shortestPath = 0;\r\n                } else {\r\n                    shortestPath = Infinity;\r\n                }\r\n                let pathData: PathData = { shortestPath: shortestPath, isVisited: false, previousNode: null };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    findShortestPath(finishPos: Position): void {\r\n        for (\r\n            let curPosition = finishPos;\r\n            curPosition != null;\r\n            curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n\r\n    protected reset(): void {\r\n        this.clear();\r\n        this.minHeap = new PriorityQueue<Position>();\r\n    }\r\n}\r\n","export interface Node {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport type Tuple<T> = [T, number];\r\n\r\nexport class PriorityQueue<T extends Node> {\r\n    heap: Tuple<T>[] = [];\r\n\r\n    constructor() {}\r\n\r\n    insert(val: T, priority: number) {\r\n        if (!this.heap.length || this.heap[this.heap.length - 1][1] > priority) {\r\n            this.heap.push([val, priority]);\r\n            return this.heap;\r\n        }\r\n\r\n        const tmp: Tuple<T>[] = [];\r\n        let found = false;\r\n\r\n        for (let i = 0; i < this.heap.length; i++) {\r\n            const p = this.heap[i][1];\r\n\r\n            if (priority >= p && !found) {\r\n                tmp.push([val, priority]);\r\n                found = true;\r\n            }\r\n\r\n            tmp.push(this.heap[i]);\r\n        }\r\n\r\n        return (this.heap = tmp);\r\n    }\r\n\r\n    has({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return !!foundNode;\r\n    }\r\n\r\n    get({ x, y }: T) {\r\n        const foundNode = this.heap.find(([val]) => val.x === x && val.y === y);\r\n\r\n        return foundNode && foundNode[0];\r\n    }\r\n\r\n    shift(priority: boolean) {\r\n        const tuple = this.heap.shift();\r\n        if (priority) {\r\n            return tuple;\r\n        }\r\n\r\n        return tuple ? tuple[0] : undefined;\r\n    }\r\n\r\n    pop() {\r\n        return this.heap.pop()[0];\r\n    }\r\n\r\n    priorities() {\r\n        return this.heap.map(([_, p]) => p);\r\n    }\r\n\r\n    values() {\r\n        return this.heap.map(([val]) => val);\r\n    }\r\n\r\n    size() {\r\n        return this.heap.length;\r\n    }\r\n\r\n    toArray(values: boolean) {\r\n        if (values) {\r\n            return this.heap.map(([val]) => val);\r\n        }\r\n        return this.heap;\r\n    }\r\n}\r\n","import PathfindingAlgorithm from './PathfindingAlgorithm';\r\nimport Stack from './DataStructures/Stack';\r\nimport { Position, Node } from '../IPathfinder';\r\n\r\nexport default class DFS extends PathfindingAlgorithm {\r\n    stack: Stack<Position> = new Stack<Position>();\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.reset();\r\n        this.setMap(grid);\r\n        this.stack.push(startPos);\r\n        while (!this.stack.isEmpty()) {\r\n            let curPosition: Position = this.stack.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.finalPath = this.visitedNodesInOrder;\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition).reverse();\r\n            for (let neighbor of neighbors) {\r\n                this.stack.push(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                this.pathValues.set(this.hash(nodePosition), { isVisited: false });\r\n            });\r\n        });\r\n    }\r\n\r\n    // recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n    //     this.reset();\r\n    //     this.calculatePath(grid, startPos, finishPos);\r\n    // }\r\n\r\n    protected reset(): void {\r\n        this.clear();\r\n        this.stack = new Stack<Position>();\r\n    }\r\n}\r\n","export default class Stack<T> {\r\n    data: Array<T>;\r\n    top: number;\r\n    constructor() {\r\n        this.data = new Array<T>();\r\n        this.top = 0;\r\n    }\r\n    public push(element: T): void {\r\n        this.data[this.top] = element;\r\n        this.top++;\r\n    }\r\n    public pop(): T {\r\n        this.top--;\r\n        return this.data[this.top];\r\n    }\r\n    // public peek(): T {\r\n    //     return this.data[this.top - 1];\r\n    // }\r\n    public isEmpty(): boolean {\r\n        return this.top === 0;\r\n    }\r\n}\r\n","import PathfindingAlgorithm, { PathData } from './PathfindingAlgorithm';\r\nimport Queue from './DataStructures/Queue';\r\nimport { Node, Position } from '../IPathfinder';\r\n\r\nexport default class BFS extends PathfindingAlgorithm {\r\n    queue: Queue<Position> = new Queue<Position>();\r\n\r\n    calculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n        this.reset();\r\n        this.setMap(grid);\r\n        this.queue.push(startPos);\r\n        while (!this.queue.isEmpty()) {\r\n            let curPosition: Position = this.queue.pop();\r\n            this.markAsVisited(curPosition);\r\n            if (this.equalPosition(curPosition, finishPos)) {\r\n                this.findShortestPath(finishPos);\r\n                return;\r\n            }\r\n            let neighbors: Array<Position> = this.getNeighbors(grid, curPosition);\r\n            for (let neighbor of neighbors) {\r\n                this.queue.push(neighbor);\r\n                this.pathValues.set(this.hash(neighbor), { isVisited: true, previousNode: curPosition });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setMap(grid: Array<Array<Node>>): void {\r\n        grid.forEach((row) => {\r\n            row.forEach((node) => {\r\n                let nodePosition: Position = node.position;\r\n                let pathData: PathData = {\r\n                    isVisited: false,\r\n                    previousNode: null,\r\n                };\r\n                this.pathValues.set(this.hash(nodePosition), pathData);\r\n            });\r\n        });\r\n    }\r\n\r\n    private findShortestPath(finishPos: Position) {\r\n        for (\r\n            let curPosition = finishPos;\r\n            curPosition != null;\r\n            curPosition = this.pathValues.get(this.hash(curPosition)).previousNode\r\n        ) {\r\n            this.finalPath.unshift(curPosition);\r\n        }\r\n    }\r\n\r\n    // recalculatePath(grid: Array<Array<Node>>, startPos: Position, finishPos: Position): void {\r\n    //     this.clear();\r\n    //     this.queue = new Queue<Position>();\r\n    //     this.calculatePath(grid, startPos, finishPos);\r\n    // }\r\n\r\n    protected reset(): void {\r\n        this.clear();\r\n        this.queue = new Queue<Position>();\r\n    }\r\n}\r\n","export default class Queue<T> {\r\n    data: Array<T> = [];\r\n    push(element: T) {\r\n        this.data.push(element);\r\n    }\r\n    pop(): T {\r\n        return this.data.shift();\r\n    }\r\n    isEmpty(): boolean {\r\n        return this.data.length === 0;\r\n    }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\n\r\nexport default class RecursiveDivision extends MazeGenerator {\r\n    gapMap: Map<string, Position>;\r\n    public generateWalls(): Position[] {\r\n        this.wallsCreatedInOrder = [];\r\n        this.gapMap = new Map<string, Position>();\r\n        const ul: Position = { x: 0, y: 0 };\r\n        const lr: Position = { x: GRID_W - 1, y: GRID_H - 1 };\r\n        this.divide(ul, lr);\r\n        return this.wallsCreatedInOrder;\r\n    }\r\n\r\n    private divide(ul: Position, lr: Position) {\r\n        let width: number = lr.x - ul.x + 1;\r\n        let height: number = lr.y - ul.y + 1;\r\n        if (width < 2 || height < 2 || (width === 2 && height === 2)) {\r\n            // || (height === 3 && width === 2) || (height ===  && width === 2)) {\r\n            return;\r\n        }\r\n        let vertical: boolean = width > height;\r\n        let splitIdx: number;\r\n        let gap: Position;\r\n        let found = false;\r\n        while (!found) {\r\n            if (vertical) {\r\n                splitIdx = this.getRandom(ul.x + 1, lr.x - 1);\r\n                gap = { x: splitIdx, y: this.getRandom(ul.y, lr.y) };\r\n                console.log(`Trying ${splitIdx}, width: ${width} heoght: ${height}`);\r\n                let up: Position = { x: splitIdx, y: ul.y - 1 };\r\n                let down: Position = { x: splitIdx, y: lr.y + 1 };\r\n                if (width > 2 && height > 2) {\r\n                    found = !this.gapMap.has(this.hash(up)) && !this.gapMap.has(this.hash(down));\r\n                } else {\r\n                    found = true;\r\n                }\r\n            } else {\r\n                splitIdx = this.getRandom(ul.y + 1, lr.y - 1);\r\n                gap = { x: this.getRandom(ul.x, lr.x), y: splitIdx };\r\n                console.log(`Trying ${splitIdx}, width: ${width} heoght: ${height}`);\r\n                let left: Position = { x: ul.x - 1, y: splitIdx };\r\n                let right: Position = { x: lr.x + 1, y: splitIdx };\r\n                if (width > 2 && height > 2) {\r\n                    found = !this.gapMap.has(this.hash(left)) && !this.gapMap.has(this.hash(right));\r\n                } else {\r\n                    found = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gapMap.set(this.hash(gap), gap);\r\n\r\n        for (let i = vertical ? ul.y : ul.x; i <= (vertical ? lr.y : lr.x); i++) {\r\n            if (i === (vertical ? gap.y : gap.x)) continue;\r\n            let pos: Position;\r\n            if (vertical) {\r\n                pos = { x: splitIdx, y: i };\r\n            } else {\r\n                pos = { x: i, y: splitIdx };\r\n            }\r\n            this.wallsCreatedInOrder.push(pos);\r\n        }\r\n\r\n        let newLr: Position;\r\n        let newUl: Position;\r\n        if (vertical) {\r\n            newLr = { x: splitIdx - 1, y: lr.y };\r\n            newUl = { x: splitIdx + 1, y: ul.y };\r\n        } else {\r\n            newLr = { x: lr.x, y: splitIdx - 1 };\r\n            newUl = { x: ul.x, y: splitIdx + 1 };\r\n        }\r\n        this.divide(ul, newLr);\r\n        this.divide(newUl, lr);\r\n    }\r\n    // checkSplit(ul: Position, lr: Position, splitIdx: number, vertical: boolean): boolean {\r\n    //     let wallStart: Position;\r\n    //     let wallFinish: Position;\r\n    //     if (vertical) {\r\n    //         wallStart = { x: splitIdx, y: ul.y };\r\n    //         wallFinish = { x: splitIdx, y: lr.y };\r\n    //     } else {\r\n    //         wallStart = { x: ul.x, y: splitIdx };\r\n    //         wallFinish = { x: lr.x, y: splitIdx };\r\n    //     }\r\n    // }\r\n\r\n    private hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n\r\n    // private buildWall(min: number, max: number, splitIdx: number, vertical: boolean): void {\r\n    //     let divLen = max - min;\r\n    //     let wallGap = this.getRandom(divLen);\r\n    //     for (let i = min; i < max; i++) {\r\n    //         if (i === wallGap) continue;\r\n    //         let pos: Position;\r\n    //         if (vertical) {\r\n    //             pos = { x: splitIdx, y: i };\r\n    //         } else {\r\n    //             pos = { x: i, y: splitIdx };\r\n    //         }\r\n    //         this.wallsCreatedInOrder.push(pos);\r\n    //     }\r\n    // }\r\n}\r\n","import { Position, GRID_W, GRID_H } from '../IPathfinder';\r\nimport WallCarver from './wallCarver';\r\n\r\nexport default class RecursiveBacktracking extends WallCarver {\r\n    visited: Map<String, boolean>;\r\n    public generateWalls(): Position[] {\r\n        this.wallsCreatedInOrder = [];\r\n        this.visited = new Map<string, boolean>();\r\n        this.createStartingWalls();\r\n        let randomPos: Position = {\r\n            x: 2 * this.getRandom(1, (GRID_W - 1) / 2) - 1,\r\n            y: 2 * this.getRandom(1, (GRID_H - 1) / 2) - 1,\r\n        };\r\n        this.carveWalls(randomPos);\r\n        return this.wallsCreatedInOrder;\r\n    }\r\n\r\n    carveWalls(current: Position): void {\r\n        this.visit(current);\r\n        let neighbors: Position[] = this.getUnvisitedNeighbors(current);\r\n        for (let neighbor of neighbors) {\r\n            console.log(neighbor);\r\n            if (!this.isVisisted(neighbor)) {\r\n                this.placeWallBetweenPositions(current, neighbor);\r\n                this.carveWalls(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getUnvisitedNeighbors(current: Position): Position[] {\r\n        let right: Position = { x: current.x + 2, y: current.y };\r\n        let up: Position = { x: current.x, y: current.y - 2 };\r\n        let left: Position = { x: current.x - 2, y: current.y };\r\n        let bot: Position = { x: current.x, y: current.y + 2 };\r\n        let neighbors: Position[] = [right, up, left, bot];\r\n        neighbors = neighbors.filter((pos: Position) => {\r\n            return this.positionInBounds(pos);\r\n        });\r\n        return this.randomisePositions(neighbors);\r\n    }\r\n\r\n    private randomisePositions(positions: Position[]): Position[] {\r\n        return positions.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    private visit(position: Position): void {\r\n        this.visited.set(this.hash(position), true);\r\n    }\r\n\r\n    private isVisisted(position: Position): boolean {\r\n        return this.visited.has(this.hash(position));\r\n    }\r\n\r\n    private hash(position: Position): string {\r\n        return position.x.toString() + '-' + position.y.toString();\r\n    }\r\n}\r\n","import MazeGenerator from './MazeGenerator';\r\nimport { Position, GRID_W, GRID_H } from '../IPathfinder';\r\nimport WallCarver, { ADJUSTED_WIDTH, ADJUSTED_HEIGHT } from './wallCarver';\r\n\r\nexport default class Ellers extends WallCarver {\r\n    public generateWalls(): Position[] {\r\n        this.wallsCreatedInOrder = [];\r\n        this.createStartingWalls();\r\n        this.generateMaze();\r\n        return this.wallsCreatedInOrder;\r\n    }\r\n\r\n    private generateMaze(): void {\r\n        let currentRow: Uptree = new Uptree();\r\n        currentRow = this.mergeRow(currentRow, 0, true);\r\n        for (let y = 1; y < ADJUSTED_HEIGHT; y++) {\r\n            let prevRow = currentRow;\r\n            currentRow = this.extendToNextRow(currentRow, prevRow, y);\r\n            currentRow = this.mergeRow(currentRow, y, y !== ADJUSTED_HEIGHT - 1);\r\n        }\r\n    }\r\n    extendToNextRow(currentRow: Uptree, prevRow: Uptree, rowIdx: number) {\r\n        currentRow = new Uptree();\r\n        for (let x = 0; x < ADJUSTED_WIDTH; x++) {\r\n            if (prevRow.isRoot(x)) {\r\n                currentRow.addEntry(x, -1);\r\n                this.addTopWall({ x: x, y: rowIdx });\r\n            } else if (this.randomBool()) {\r\n                currentRow.addEntry(x, prevRow.getEntry(x));\r\n                this.addTopWall({ x: x, y: rowIdx });\r\n            }\r\n        }\r\n        return currentRow;\r\n    }\r\n\r\n    private mergeRow(row: Uptree, rowIdx: number, random: boolean) {\r\n        for (let i = 0; i < ADJUSTED_WIDTH - 1; i++) {\r\n            if ((this.randomBool() || !random) && !row.sameClass(i, i + 1)) {\r\n                row.mergeSets(i, i + 1);\r\n                this.addRightWall({ x: i, y: rowIdx });\r\n            }\r\n        }\r\n        return row;\r\n    }\r\n    addRightWall(pos: Position): void {\r\n        this.addWall({ x: 2 * pos.x + 2, y: 2 * pos.y + 1 });\r\n    }\r\n\r\n    addTopWall(pos: Position): void {\r\n        this.addWall({ x: 2 * pos.x + 1, y: 2 * pos.y });\r\n    }\r\n\r\n    private randomBool(): boolean {\r\n        return Math.random() >= 0.5;\r\n    }\r\n}\r\n\r\nclass Uptree {\r\n    data: number[];\r\n    constructor() {\r\n        this.data = Array(ADJUSTED_WIDTH).fill(-1);\r\n    }\r\n\r\n    public mergeSets(set1: number, set2: number): void {\r\n        if (this.data[set1] === -1) {\r\n            this.data[set1] = this.getRoot(set2);\r\n        } else {\r\n            this.data[set2] = this.getRoot(set1);\r\n        }\r\n    }\r\n\r\n    public sameClass(index1: number, index2: number) {\r\n        return this.getRoot(index1) === this.getRoot(index2);\r\n    }\r\n\r\n    public getRoot(index: number): number {\r\n        while (this.data[index] !== -1) {\r\n            index = this.data[index];\r\n        }\r\n        return index;\r\n    }\r\n\r\n    public isRoot(index: number): boolean {\r\n        return this.data[index] === -1;\r\n    }\r\n\r\n    public addEntry(index: number, value: number) {\r\n        this.data[index] = value;\r\n    }\r\n\r\n    public getEntry(index: number): number {\r\n        return this.getRoot(index);\r\n    }\r\n}\r\n","// Credit to https://github.com/Bartvds/lorez/blob/master/src/extra/PerlinNoise.ts\r\n\r\nexport default class PerlinNoise {\r\n\r\n\tprivate p: number[];\r\n\tprivate permutation: number[];\r\n\r\n\tconstructor() {\r\n\t\t// To remove the need for index wrapping, double the permutation table length\r\n\t\tthis.permutation = [ 151, 160, 137, 91, 90, 15,\r\n\t\t\t131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\r\n\t\t\t190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\r\n\t\t\t88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\r\n\t\t\t77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\r\n\t\t\t102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\r\n\t\t\t135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\r\n\t\t\t5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\r\n\t\t\t223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\r\n\t\t\t129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\r\n\t\t\t251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\r\n\t\t\t49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\r\n\t\t\t138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\r\n\t\t];\r\n\t\tthis.p = new Array(512);\r\n\r\n\t\tfor (var i = 0; i < 256; i++) {\r\n\t\t\tthis.p[256 + i] = this.p[i] = this.permutation[i];\r\n\t\t}\r\n\t}\r\n\r\n\tnoise(x: number, y: number, z: number): number {\r\n\t\tvar X = Math.floor(x) & 255;     // FIND UNIT CUBE THAT\r\n\t\tvar Y = Math.floor(y) & 255;     // CONTAINS POINT.\r\n\t\tvar Z = Math.floor(z) & 255;\r\n\r\n\t\tx -= Math.floor(x);              // FIND RELATIVE X,Y,Z\r\n\t\ty -= Math.floor(y);              // OF POINT IN CUBE.\r\n\t\tz -= Math.floor(z);\r\n\r\n\t\tvar u = this.fade(x);            // COMPUTE FADE CURVES\r\n\t\tvar v = this.fade(y);            // FOR EACH OF X,Y,Z.\r\n\t\tvar w = this.fade(z);\r\n\r\n\t\tvar A = this.p[X] + Y;\r\n\t\tvar AA = this.p[A] + Z;\r\n\t\tvar AB = this.p[A + 1] + Z;      // HASH COORDINATES OF\r\n\r\n\t\tvar B = this.p[X + 1] + Y;\r\n\t\tvar BA = this.p[B] + Z;\r\n\t\tvar BB = this.p[B + 1] + Z;      // THE 8 CUBE CORNERS,\r\n\r\n\t\treturn this.scale(this.lerp(w, this.lerp(v, this.lerp(u, this.grad(this.p[AA  ], x, y, z),  // AND ADD\r\n\t\t\t\t\tthis.grad(this.p[BA], x - 1, y, z)), // BLENDED\r\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB], x, y - 1, z),  // RESULTS\r\n\t\t\t\t\tthis.grad(this.p[BB], x - 1, y - 1, z))),// FROM  8\r\n\t\t\tthis.lerp(v, this.lerp(u, this.grad(this.p[AA + 1], x, y, z - 1),  // CORNERS\r\n\t\t\t\t\tthis.grad(this.p[BA + 1], x - 1, y, z - 1)), // OF CUBE\r\n\t\t\t\tthis.lerp(u, this.grad(this.p[AB + 1], x, y - 1, z - 1),\r\n\t\t\t\t\tthis.grad(this.p[BB + 1], x - 1, y - 1, z - 1)))));\r\n\t}\r\n\r\n\tfade(t: number): number {\r\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\r\n\t}\r\n\r\n\tlerp(t: number, a: number, b: number): number {\r\n\t\treturn a + t * (b - a);\r\n\t}\r\n\r\n\tgrad(hash: number, x: number, y: number, z: number): number {\r\n\t\tvar h = hash & 15;      // CONVERT LO 4 BITS OF HASH CODE\r\n\t\tvar u = h < 8 ? x : y;  // INTO 12 GRADIENT DIRECTIONS.\r\n\t\tvar v = h < 4 ? y : h == 12 || h == 14 ? x : z;\r\n\t\treturn ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\r\n\t}\r\n\r\n\tscale(n: number): number {\r\n\t\treturn (1 + n) / 2;\r\n\t}\r\n}"],"sourceRoot":""}